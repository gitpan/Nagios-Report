head	1.69;
access;
symbols;
locks
	sh1517:1.69; strict;
comment	@# @;


1.69
date	2006.03.15.04.17.21;	author sh1517;	state Exp;
branches;
next	1.68;

1.68
date	2006.03.07.04.58.34;	author sh1517;	state Exp;
branches;
next	1.67;

1.67
date	2006.03.05.22.13.01;	author sh1517;	state Exp;
branches;
next	1.66;

1.66
date	2006.01.14.09.10.05;	author sh1517;	state Exp;
branches;
next	1.65;

1.65
date	2006.01.13.06.05.22;	author sh1517;	state Exp;
branches;
next	1.64;

1.64
date	2005.12.23.08.47.58;	author sh1517;	state Exp;
branches;
next	1.63;

1.63
date	2005.12.23.07.40.42;	author sh1517;	state Exp;
branches;
next	1.62;

1.62
date	2005.12.23.02.58.17;	author sh1517;	state Exp;
branches;
next	1.61;

1.61
date	2005.12.23.02.57.11;	author sh1517;	state Exp;
branches;
next	1.60;

1.60
date	2005.12.18.06.18.31;	author sh1517;	state Exp;
branches;
next	1.59;

1.59
date	2005.12.17.11.21.07;	author sh1517;	state Exp;
branches;
next	1.58;

1.58
date	2005.12.17.05.24.34;	author sh1517;	state Exp;
branches;
next	1.57;

1.57
date	2005.12.14.05.07.15;	author sh1517;	state Exp;
branches;
next	1.56;

1.56
date	2005.12.14.03.21.40;	author sh1517;	state Exp;
branches;
next	1.55;

1.55
date	2005.12.14.02.55.26;	author sh1517;	state Exp;
branches;
next	1.54;

1.54
date	2005.12.14.00.18.06;	author sh1517;	state Exp;
branches;
next	1.53;

1.53
date	2005.12.13.08.46.41;	author sh1517;	state Exp;
branches;
next	1.52;

1.52
date	2005.12.13.02.35.55;	author sh1517;	state Exp;
branches;
next	1.51;

1.51
date	2005.12.13.00.34.26;	author sh1517;	state Exp;
branches;
next	1.50;

1.50
date	2005.12.01.08.38.19;	author sh1517;	state Exp;
branches;
next	1.49;

1.49
date	2005.12.01.03.23.58;	author sh1517;	state Exp;
branches;
next	1.48;

1.48
date	2005.12.01.00.34.43;	author sh1517;	state Exp;
branches;
next	1.47;

1.47
date	2005.11.30.11.16.56;	author sh1517;	state Exp;
branches;
next	1.46;

1.46
date	2005.11.29.11.01.02;	author sh1517;	state Exp;
branches;
next	1.45;

1.45
date	2005.11.28.05.07.06;	author sh1517;	state Exp;
branches;
next	1.44;

1.44
date	2005.11.27.23.28.52;	author sh1517;	state Exp;
branches;
next	1.43;

1.43
date	2005.11.24.22.14.16;	author sh1517;	state Exp;
branches;
next	1.42;

1.42
date	2005.11.24.08.47.37;	author sh1517;	state Exp;
branches;
next	1.41;

1.41
date	2005.11.24.06.55.17;	author sh1517;	state Exp;
branches;
next	1.40;

1.40
date	2005.11.24.02.01.45;	author sh1517;	state Exp;
branches;
next	1.39;

1.39
date	2005.11.24.01.36.16;	author sh1517;	state Exp;
branches;
next	1.38;

1.38
date	2005.11.24.01.32.13;	author sh1517;	state Exp;
branches;
next	1.37;

1.37
date	2005.11.23.11.09.55;	author sh1517;	state Exp;
branches;
next	1.36;

1.36
date	2005.11.23.00.28.42;	author sh1517;	state Exp;
branches;
next	1.35;

1.35
date	2005.11.22.03.39.13;	author sh1517;	state Exp;
branches;
next	1.34;

1.34
date	2005.11.12.09.44.57;	author sh1517;	state Exp;
branches;
next	1.33;

1.33
date	2005.11.12.09.15.21;	author sh1517;	state Exp;
branches;
next	1.32;

1.32
date	2005.11.11.08.42.47;	author sh1517;	state Exp;
branches;
next	1.31;

1.31
date	2005.11.07.23.42.16;	author sh1517;	state Exp;
branches;
next	1.30;

1.30
date	2005.11.03.09.52.33;	author sh1517;	state Exp;
branches;
next	1.29;

1.29
date	2005.11.02.07.57.59;	author sh1517;	state Exp;
branches;
next	1.28;

1.28
date	2005.11.01.23.33.00;	author sh1517;	state Exp;
branches;
next	1.27;

1.27
date	2005.11.01.10.39.36;	author sh1517;	state Exp;
branches;
next	1.26;

1.26
date	2005.11.01.07.48.38;	author sh1517;	state Exp;
branches;
next	1.25;

1.25
date	2005.11.01.07.42.13;	author sh1517;	state Exp;
branches;
next	1.24;

1.24
date	2005.11.01.07.23.51;	author sh1517;	state Exp;
branches;
next	1.23;

1.23
date	2005.11.01.02.00.45;	author sh1517;	state Exp;
branches;
next	1.22;

1.22
date	2005.11.01.01.50.11;	author sh1517;	state Exp;
branches;
next	1.21;

1.21
date	2005.10.31.23.58.03;	author sh1517;	state Exp;
branches;
next	1.20;

1.20
date	2005.10.30.21.36.10;	author sh1517;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.30.21.32.36;	author sh1517;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.30.07.12.26;	author sh1517;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.29.13.42.53;	author sh1517;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.29.12.20.11;	author sh1517;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.29.12.10.23;	author sh1517;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.29.11.54.51;	author sh1517;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.29.11.15.25;	author sh1517;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.29.05.53.45;	author sh1517;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.29.05.30.11;	author sh1517;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.29.02.41.23;	author sh1517;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.29.00.39.27;	author sh1517;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.28.12.04.05;	author sh1517;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.27.13.22.06;	author xwin;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.27.13.09.51;	author xwin;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.27.10.08.31;	author xwin;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.27.08.50.31;	author xwin;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.27.08.37.14;	author xwin;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.26.11.23.19;	author xwin;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.26.10.41.20;	author xwin;	state Exp;
branches;
next	;


desc
@@


1.69
log
@1 POD changes - note the limitations of the to_dbh() method.
2 Changes to excel_dump() to output a workbook with a chart.
@
text
@package Nagios::Report;

use strict;

# $Id: Report.pm,v 1.68 2006/03/07 04:58:34 sh1517 Exp sh1517 $

use base 'Exporter' ;
use Time::Local ;

use vars qw($VERSION @@EXPORT @@EXPORT_OK %stime_etime);

*t2hms = \&time2ddhhmmss ;
*d2t   = \&date2time ;
*i2t   = \&interval2time ;
*st_et = \%stime_etime ;

@@EXPORT = qw(d2t t2hms comp max_l %st_et i2t) ;

$VERSION = '0.016_pre1';

use constant REQUEST_METHOD		=> 'GET' ;

							# Will be hacked by Makefile.PL

use constant CGI_PATH			=> '/usr/lib/nagios/cgi/' ;
use constant LYNX			=> '/usr/bin/lynx' ;
use constant WGET			=> '' ;
							# EURO_DATE => \d\d?-\d\d?-\d\d\d\d
							# will be interpreted as DD-MM-YYYY
use constant EURO_DATE			=> 1 ;

							# End scope of expected changes by Makefile.PL

							# NB. I choose lynx etc over LWP because
							# LWP is a big module (LWP::Simple doesn't
							# fetch protected pages).
							

use constant NAG_AVAIL_CGI		=> CGI_PATH . 'avail.cgi' ;
use constant WEB_PAGE			=> !! (LYNX || WGET) ;
use constant LOCAL_CGI			=> !! CGI_PATH ;
use constant USE_LYNX			=> !! (WEB_PAGE && LYNX) ;

use constant EXCEL_FILENAME		=> './Nagios_Avail.xls' ;

use constant QS_TEMP_HOSTREP		=> 
q(show_log_entries=&host=all&t1=T1&t2=T2&rpttimeperiod=REPORT_PERIOD&assumeinitialstates=yes&assumestateretention=yes&assumestatesduringnotrunning=yes&includesoftstates=no&initialassumedhoststate=3&initialassumedservicestate=6&backtrack=0&csvoutput) ;

use constant QS_TEMP_SVCREP		=> 
q(show_log_entries=&host=FOO&service=all&t1=T1&t2=T2&rpttimeperiod=REPORT_PERIOD&assumeinitialstates=yes&assumestateretention=yes&assumestatesduringnotrunning=yes&includesoftstates=no&initialassumedservicestate=6&backtrack=0&csvoutput=) ;

use constant AVAIL_URL_TEMP_HOST	=>
q(http://SERVER/nagios/cgi-bin/avail.cgi?host=HOST&t1=T1&t2=T2&show_log_entries=&assumeinitialstates=yes&assumestateretention=yes&includesoftstates=no&backtrack=0) ;

use constant TREND_URL_TEMP_HOST	=>
q(http://SERVER/nagios/cgi-bin/trends.cgi?host=HOST&t1=T1&t2=T2&assumeinitialstates=yes&assumestateretention=yes&includesoftstates=no) ;

use constant AVAIL_URL_TEMP_SVC		=>
q(http://SERVER/nagios/cgi-bin/avail.cgi?host=HOST&service=SVC&t1=T1&t2=T2&show_log_entries=&assumeinitialstates=yes&assumestateretention=yes&includesoftstates=no&assumestatesduringnotrunning=yes&backtrack=0&initialassumedservicestate=6) ;

use constant TREND_URL_TEMP_SVC		=>
q(http://SERVER/nagios/cgi-bin/trends.cgi?host=HOST&service=SVC&t1=T1&t2=T2&assumeinitialstates=yes&assumestatesduringnotrunning=yes&initialassumedhoststate=0&initialassumedservicestate=0&assumestateretention=yes&includesoftstates=no) ;

use constant {
	SEC				=> 0,
	MIN				=> 1,
	HOUR				=> 2,
	MDAY				=> 3,
	MON				=> 4,
	YEAR				=> 5,
	WDAY				=> 6,
	YDAY				=> 7,
	ISDST				=> 8,
};

use constant MONTH 			=> {
	Jan				=> 0,
	Feb				=> 1,
	Mar				=> 2,
	Apr				=> 3,
	May				=> 4,
	Jun				=> 5,
	Jul				=> 6,
	Aug				=> 7,
	Sep				=> 8,
	Oct				=> 9,
	Nov				=> 10,
	Dec				=> 11,
} ;

use constant T				=> { w => 7*86_400, d => 86_400, h => 60*60, m => 60, s => 1 } ;

sub Iterator (&) { $_[0] } ;

my %default_sort = (
	alpha		=> 1,	# 0 implies numeric
	ascend		=> 1,
	fields		=> [ qw(HOST_NAME) ],
) ;
			
   %stime_etime = (
	last12hours	=> sub { my $t = time(); ( $t - 12 * 3_600,  $t) },
	last24hours	=> sub { my $t = time(); ( $t - 1  * 86_400, $t) },
	last7days	=> sub { my $t = time(); ( $t - 7  * 86_400, $t) },
	last31days	=> sub { my $t = time(); ( $t - 31 * 86_400, $t) },
	today		=> sub { my $t = time();
				( $t - ($_[1]->[SEC] + 60 *($_[1]->[MIN] + 60 * $_[1]->[HOUR])),
				  $t
				)
			       },
	yesterday	=> sub { 
				 my $midnight = time() - ($_[1]->[SEC] + 60 *($_[1]->[MIN] + 60 * $_[1]->[HOUR])) ;
				( $midnight - 86_400,
				  $midnight
				)
			       },
	last_n_days	=> sub {
				my $days 	= shift @@_ ;
				my $t		= time() ;
				( $t - $days * 86_400,
				  $t,
				)
			       },
	last_n_hours	=> sub {
				my $hours 	= shift @@_ ;
				my $t		= time() ;
				( $t - $hours * 3_600,
				  $t,
				)
			       },
	last_n_mins	=> sub {
				my $mins 	= shift @@_ ;
				my $t		= time() ;
				( $t - $mins * 60,
				  $t,
				)
			       },
	thisweek	=> sub { 
				 my $t = time() ;
				( $t - ($_[1]->[SEC] + 60 *($_[1]->[MIN] + 60 * $_[1]->[HOUR]) + ($_[1]->[WDAY] - 1) * 86_400),
				  $t
				)
			       },
	lastweek	=> sub { 
				 my $sweek = 
				   time() - ($_[1]->[SEC] + 60 *($_[1]->[MIN] + 60 * $_[1]->[HOUR]) + ($_[1]->[WDAY] - 1) * 86_400) ;
				( $sweek - 7 * 86_400,
				  $sweek
				)
			       },
	thismonth	=> sub { 
				 ( timelocal(0, 0, 0, 1, $_[1]->[MON], $_[1]->[YEAR]),
				   time()
				 )
			       },
	lastmonth	=> sub { my ($m, $y) = ($_[1]->[MON], $_[1]->[YEAR]) ;
				    ($m, $y) = $m ? ($m - 1, $y) : (11, $y - 1) ;
				    ( timelocal(0, 0, 0, 1, $m          , $y),
				      timelocal(0, 0, 0, 1, $_[1]->[MON], $_[1]->[YEAR])
				    )
			       },
	thisyear	=> sub { my $t = time(); 
				( $t - ($_[1]->[SEC] + 60 *($_[1]->[MIN] + 60 * $_[1]->[HOUR]) + 86_400 * $_[1]->[YDAY]),
				  $t
				)
			       },
	lastyear	=> sub { 
				( timelocal(0, 0, 0, 1, 0, $_[1]->[YEAR] - 1),
				  timelocal(0, 0, 0, 1, 0, $_[1]->[YEAR])
				)
			       },
	__DEFAULT__	=> sub {
							# The 'tag' or the name of the timeperiod supplied to the constructor
				local $_ = shift @@_ ;
							# ref to an array containing the localtime value
				my    $t = shift @@_ ;

				my    @@t = @@$t ;
				my ($h, $m, $dd, $mm, $yy, $hours, $days) ;

				if (		($days)  = /^last(\d+)day/ ) {
				  return $stime_etime{last_n_days}->($days, $t) ;

				} elsif (	($hours)= /^last(\d+)hour/ ) {
				  return $stime_etime{last_n_hours}->($hours, $t) ;

				} elsif (	($m)	= /^last(\d+)min(?:ute)?(?:s)?/ ) {
				  return $stime_etime{last_n_mins}->($m, $t) ;


							# Define a time period with a string like so
							# time: HHMM | HH:MM		=> from that time today to now
							# date: DD.MM.YY | DD.MM.YYYY | MM/DD/YYYY | MM/DD/YY
							#				=> midnight on that day to now
							# time date			=> that time on that day to now 

							# The time and date formats are inspired by the at command.

				} elsif (	($h, $m) = /^ (\d\d) :? (\d\d) $/x ) {
							# HHMM | HH:MM
				  $t[HOUR] = $h ;
				  $t[MIN]  = $m ;
				  return (
						timelocal(@@t),
						timelocal(@@$t)
				         ) 

				} elsif ( ($dd, $mm, $yy) = m#
							      ^
							       (\d\d?) [\./] (\d\d?) [\./] ( \d\d (?:\d\d)? )
							      $
							     #x ) {

							# DD.MM.YY(YY)? | MM/DD/YY(YY)?
				  my $temp     = $dd ;
				     $mm       = ($dd = $mm, $temp)
				       if m#/# ;
				     $t[SEC]   = 0 ;
				     $t[MIN]   = 0 ;
				     $t[HOUR]  = 0 ;
				     $t[MDAY]  = $dd ;
				     $t[MON]   = $mm - 1 ;
				     $t[YEAR]  = $yy ;

				  return (
						timelocal(@@t),
						timelocal(@@$t)
				         ) 

				} elsif ( ($h, $m, $dd, $mm, $yy) = m#
								      ^
									(\d\d) :? (\d\d)
									\s+
									(\d\d?) [\./] (\d\d?) [\./] ( \d\d (?:\d\d)? )
								      $
								     #x ) {
							# HHMM | HH:MM DD.MM.YY(YY)? | MM/DD/YY(YY)?
				  my $temp     = $dd ;
				     $mm       = ($dd = $mm, $temp)
				       if m#/# ;
				     $t[SEC]   = 0 ;
				     $t[MIN]   = $m ;
				     $t[HOUR]  = $h ;
				     $t[MDAY]  = $dd ;
				     $t[MON]   = $mm - 1 ;
				     $t[YEAR]  = $yy ;

				  return (
						timelocal(@@t),
						timelocal(@@$t)
				         ) 
				} else {
				  die "\%stime_etime: non existent tag '$_' - no handler defined for this tag. Outahere."
				}
			       },
) ;

my %data_source = (
							# All these subroutines return a code reference
							# (a closure encapsulating auth data) that
							# actually gets the data.
  web_page	=> WEB_PAGE	? \&gen_web_page
				: sub { die 'No CLI web browser (lynx or wget) found. Use local_cgi or report bug' },
  local_cgi	=> LOCAL_CGI	? \&gen_local_cgi
				: sub { die 'Nagios availability CGI not found on this host. Use web_page or report bug' },
							# Return a ref to the subroutine in main:: (the client code)
							# that will return the CSV data.
  dev_debug	=> sub {
			 die "dev_debug source tag must be followed by the name of a callback in main::."
			   unless $_[0] ;
			 no strict 'refs' ;
			 my $cb = 'main::' . $_[0] ;
			 return \&$cb ;
		       },
  __DEFAULT__	=> sub { die "Outahere: bad source tag '$_[0]'" },
) ;

sub new {

  my ($class, $source_tag, $rpt_period, $tme_period, $rep_type, $pre_filter) = @@_ ;

  my @@report_period = $rpt_period  ? @@$rpt_period  : qw(24x7) ;
  my $time_period   = $tme_period  ? $tme_period   : q(thismonth) ;
  my $report_type   = $rep_type    ? q(service)    : q(host) ;

  die 'new() called with a pre_filter parm that is _not_ a code ref. Caller ' . join(' ', caller)
    if $pre_filter        and ref($pre_filter)        ne 'CODE' ;

  $pre_filter ||= sub { 1 } ;

  my $me	= {} ;
  my $schema	= '' ;
  my @@fieldnames= () ;
  my @@fieldnums	= () ;
  my %fields	= () ;

  $me->{REPORTS}	= {} ;
  $me->{REPORT_PERIODS}	= [ @@report_period ] ;
							# Date ranges: $time_period =~ start_at_date / \s* - \s*/x  end_at_date
							# start and end at_dates look like time stamps.
  my ($t1, $t2) ;
  if ( my ($s, $e) = $time_period =~ /^([^-]+)-([^-]+)$/ ) {
							# XXX
    $s =~ s/\s+$// ;
    $e =~ s/^\s+// ;
    ($t1, undef) = $stime_etime{__DEFAULT__}->( $s, [ localtime ]) ;
    ($t2, undef) = $stime_etime{__DEFAULT__}->( $e, [ localtime ])
  } else {
    ($t1, $t2)		= exists $stime_etime{$time_period}	? $stime_etime{$time_period}->($time_period, [ localtime ])
								: $stime_etime{__DEFAULT__}->( $time_period, [ localtime ])
  }

  my $data ;
   $source_tag          =~ s/dev_debug/dev_debug BOGON_SERVER/
     if $source_tag =~ /^dev_debug/ ;
  ($source_tag, $data)	= split /\s+/, $source_tag, 2 ;

  die "new() called with either null source_tag or null parms: \$source_tag: '$source_tag' \$data: '$data'. Caller " . 
       join(' ', caller)
    unless $source_tag && $data ; 

  my ($server, $auth)	= split /\s+/, $data, 2 ;

  die "new() called with a source_tag that failed to contain a non null server name. Caller " . join(' ', caller)
    unless $server ;

  $me->{DATA_SOURCE}	= $data_source{$source_tag}->(split /\s+/, $auth) ;
  $me->{SERVER}		= $server ;
  $me->{SOURCE_TAG}	= $source_tag ;
  $me->{REPORT_TYPE}	= $report_type ;
  $me->{T1}		= $t1 ;
  $me->{T2}		= $t2 ;

  foreach my $rep_period ( @@report_period ) {

    my $user_data ;
    $user_data		= $report_type eq 'host' ? QS_TEMP_HOSTREP : QS_TEMP_SVCREP ;
    $user_data		=~ s/t1=T1&t2=T2/t1=$t1&t2=$t2/ ;
    $user_data		=~ s/REPORT_PERIOD/$rep_period/ ;
    $user_data		=
      $me->{SOURCE_TAG} eq 'web_page'	? "http://$me->{SERVER}/nagios/cgi-bin/avail.cgi?$user_data" :
      $me->{SOURCE_TAG} eq 'dev_debug'	? $rep_period :
      $me->{SOURCE_TAG} eq 'local_cgi'	? $user_data :
				 	  '__DEFAULT__' ;

    my @@avail_rep	= $me->{DATA_SOURCE}->($user_data) ;

    $schema			= shift @@avail_rep ;
    $schema			.= ', AVAIL_URL, TREND_URL' ;
    $me->{FIELDNAMES} 		||= [ @@fieldnames = split /,\s+/, $schema ] ;
    @@fields{@@fieldnames}	= (0 .. $#fieldnames) ;
    $me->{FIELDS}		||= { %fields } ;

    my @@avail_report		= () ;

    local $_ ;

    foreach (@@avail_rep) {
      my @@vals = split /,\s+/ ;

      my $host = $vals[$fields{HOST_NAME}] ;
      my $svc ;
      $host    =~ s/"//g ;
      $vals[$fields{HOST_NAME}]  = $host ;
      if ( $report_type eq 'service' ) {
        $svc = $vals[$fields{SERVICE_DESCRIPTION}] ;
        $svc =~ s/"//g ;
        $vals[$fields{SERVICE_DESCRIPTION}] = $svc ;
      }

      my $avail_url =  $report_type eq 'host' ? AVAIL_URL_TEMP_HOST : AVAIL_URL_TEMP_SVC ;
         $avail_url =~ s/HOST/$host/ ;
         $avail_url =~ s/SVC/$svc/
           if $report_type eq 'service' ;
         $avail_url =~ s/t1=T1&t2=T2/t1=$t1&t2=$t2/ ;
         $avail_url =~ s/SERVER/$me->{SERVER}/ ;
      $vals[$fields{AVAIL_URL}] = $avail_url ;

      my $trend_url =  $report_type eq 'host' ? TREND_URL_TEMP_HOST : TREND_URL_TEMP_SVC ;
         $trend_url =~ s/HOST/$host/ ;
         $trend_url =~ s/SVC/$svc/
           if $report_type eq 'service' ;
         $trend_url =~ s/t1=T1&t2=T2/t1=$t1&t2=$t2/ ;
         $trend_url =~ s/SERVER/$me->{SERVER}/ ;
      $vals[$fields{TREND_URL}] = $trend_url ;

      my %F ;
         @@F{@@fieldnames} = @@vals ;

      next
        unless $pre_filter->(%F) ;

      push @@avail_report, [ @@vals ] ;
    }

    $me->{AVAIL_REPORTS}{$rep_period}	=  [ @@avail_report ] ;

  }

  bless $me, ref($class) || $class ;

}

							# Runs while object 'loads'
							# Creates accessors for the callers convenience.

							# XXX
							# This class will _not_ use the accessors itself
							# since it doesn't believe it will be inherited from.

foreach my $acc (qw(FIELDS FIELDNAMES REPORT_PERIODS T1 T2 SERVER AVAIL_REPORTS REPORTS DATA_SOURCE SOURCE_TAG REPORT_TYPE)) {
  no strict 'refs' ;
  *$acc = sub {
      my $me = shift @@_ ;
      $me->{$acc} = @@_
        if @@_ ;
      $me->{$acc} ;
  }
}

sub mkreport {
  my ($me, $these_fields, $select_these, $this_order, $alter, $add_downs) = @@_ ;

							# $these_fields: fields which will appear in output
							#                in the same order as specified (in
							#                the array pointed to).
							# $select_these: callback specifying which records
							#                to report on.
							# $this_order  : callback for sort to order the
							#                records.
							# $alter       : callback to add fields to or other
							#                wise mangle a record. Should return
							#                the names of any added fields.
							# $add_downs   : duplicate the rec by the
							#                number of outage recs, appending
							#                time down, up and outage duration.

							# XXX
							# $these_fields should specify the names and orders
							# of any fields added by $alter->().

  my $usage =<<'USAGE' ;

mkreport(  $these_fields, $select_these, $this_order, $alter, $add_downs )

$these_fields := optional array ref enumerating the fields, and there order to appear in the report.
$select_these := optional callback returning true if the availability record is to appear in the report. Called
                 with pairs of all fields and values for this record.
$this_order   := optional callback specifiying sort order. Called with pairs of all fieldnames and their offsets
$alter        := optional callback that munges fields (transforming field values or adding new fields).
$add_downs    := optional flag. If set, each availability record is duplicated by the number of outage records,
                   and the time down, time up and duration of the outage is appended to each record.

USAGE

  die $usage
    if $these_fields and ref($these_fields) ne 'ARRAY' ;

  die $usage
    if $select_these and ref($select_these) ne 'CODE' ;

  die $usage
    if $this_order   and ref($this_order)   ne 'CODE' ;

  die $usage
    if $alter        and ref($alter)        ne 'CODE' ;

  $these_fields   ||= [] ;
  $select_these   ||= sub { 1 } ;
  $this_order     ||= sub { my %f = @@_ ; $a->[$f{HOST_NAME}] cmp $b->[$f{HOST_NAME}] } ;

  my @@field_names = scalar(@@$these_fields) ? @@$these_fields : @@{ $me->{FIELDNAMES} } ;
  my @@fieldnames  = @@{ $me->{FIELDNAMES} } ;
  my %fields      = %{$me->{FIELDS}} ;

							# map 
							#     slice
							#       sort
							#         filter
							#           alter
							#             add_downs list

							# Do the transforms - to add
							# fields - first, and then 
							# update the fieldnames so
							# the new fields can be used
							# to select and sort.

  foreach my $rep ( keys %{ $me->{AVAIL_REPORTS} } ) {

    my (%F, @@r, @@avail_recs, $avail_url) ;

    @@avail_recs = @@{ $me->{AVAIL_REPORTS}{$rep} } ;

    next
      unless @@avail_recs ;

    @@r          = ( shift @@avail_recs ) ;

    $add_downs  = 0
      unless $me->{SOURCE_TAG} =~ /^(?:web_page|local_cgi)/ ;

    if ( $add_downs ) {
      my @@ofn   = qw(DOWN UP OUTAGE) ;
      push @@fieldnames,  @@ofn ;
							# The new fields are added to the list
							# of those appearing in the report
      push @@field_names, @@ofn
        unless grep $_ eq $ofn[0], @@field_names ;
      @@r        =
        map { get_downs($_, $me->{DATA_SOURCE}, $_->[$fields{AVAIL_URL}], $me->{T1}) } shift @@r ;
    }

    if ( $alter ) {
      my @@downs       = @@r ;
      @@F{@@fieldnames} = @@{$r[0]} ;
							# XXX - don't modify the rec, only get the added fields.
      my @@afn         =  $alter->($r[0], %F) ;
      push @@fieldnames,  @@afn ;
      push @@field_names, @@afn
        unless grep $_ eq $afn[0], @@field_names ;
      @@r              =
        map { @@F{@@fieldnames} = @@$_; $alter->($_, %F); $_ } @@downs ;
    }

    $me->{FIELDNAMES}    = [ @@fieldnames ] ;
    @@fields{@@fieldnames} = 0 .. $#fieldnames ;
    $me->{FIELDS}        = { %fields } ;

                                                        # Transform rec by adding or munging fields
							# NB, the one attempt I made to move the
							# tests outside map actually slowed the benchmark
							# 'make tests'.
    push @@r,
		map {
			@@F{@@fieldnames} = @@$_ ;
			$alter->($_, %F)
			  if $alter ;
			$_
		    }
		map {
			$add_downs 
			  ? get_downs($_, $me->{DATA_SOURCE}, $_->[$fields{AVAIL_URL}], $me->{T1})
			  : $_
		    }
			@@avail_recs ;

							# Slice
    my @@rep = map [ @@{$_}[@@fields{@@field_names}] ],
							# Sort
                 sort { $this_order->(%fields) }
							# Filter
                   grep { @@F{@@{$me->{FIELDNAMES}}} = @@$_; $select_these->(%F) }
                       @@r ;

    $me->{REPORTS}{$rep}{RECORDS}    = [ @@rep ] ;
    $me->{REPORTS}{$rep}{FIELDNAMES} = [ @@field_names ] ;
  }

}


sub excel_dump {
  my ($me, $excel_filename, $chart_details) = @@_ ;

  eval { require Spreadsheet::WriteExcel } ;
  die "John McNamara's _excellent_ CPAN module, Spreadsheet::WriteExcel is needed by excel_dump(). Outahere. "
	if $@@ ;

  my $workbook  = Spreadsheet::WriteExcel->new($excel_filename || EXCEL_FILENAME) ;
  die "Spreadsheet::WriteExcel constructor failed, prob opening '$excel_filename': $!"
    unless $workbook ;

  my $format     = $workbook->add_format() ;
     $format->set_bold() ;

  foreach my $rep (@@{ $me->{REPORT_PERIODS} }) {

    my $down_times = $me->{REPORTS}{$rep}{RECORDS} ;

    my $worksheet  = $workbook->addworksheet($rep) ;

    my @@max_col_width = () ;
							# The general syntax is write($row, $column, $token).
							# Note that row and column are zero indexed
    my ($row, $col) = (0, 0) ;

							# XXX
							# Scan all data to determine widest column.
							# The column width needs to be set before any
							# cells are written.

    foreach my $c ( @@{ $me->{REPORTS}{$rep}{FIELDNAMES} } ) {
      $max_col_width[$col++] = 1.5 * length($c) ;
							# Fieldnames are bold so are wider than usual.
    }

    foreach my $r (@@$down_times) {
      $col = 0 ;
      foreach my $c (@@$r) {
        my $h ;
							# XXX
							# Set col width to width of label _not_ the URL.

        my $len = (($h) = $c =~ m#^http://.+?host=([^&]+)&#) ? length($h) : length($c) ;
        $max_col_width[$col] = $len 
          if $len >= $max_col_width[$col] ;
        $col++ ;
      }
    }

    $col = 0 ;

    foreach my $c ( @@{ $me->{REPORTS}{$rep}{FIELDNAMES} } ) {
      $worksheet->set_column($col, $col, $max_col_width[$col]) ;
      $worksheet->write(0, $col, $c, $format) ;
      $col++
    }
 
    $row = 1 ; 

    foreach my $r (@@$down_times) {
      $col = 0 ;
      foreach my $c ( @@$r ) {
        if ( my ($h) = $c =~ m#^http://.+?host=([^&]+)&# ) {
          $worksheet->write_url($row, $col, $c, $h ? $h : "URL without hostname: $c") ;
        } else {
          $worksheet->write($row, $col, $c)
        }
        $col++ ;
      }
      $row++ ;
    }
  }

  &add_chart($workbook, $chart_details) 
    if $chart_details ;

}


sub csv_dump {
  my $me = shift @@_ ;

  foreach my $rep (@@{ $me->{REPORT_PERIODS} }) {

    print "==> $rep reporting period.\n" ;

    my $down_times = $me->{REPORTS}{$rep}{RECORDS} ;

    print
	join(',',  @@{ $me->{REPORTS}{$rep}{FIELDNAMES} }), "\n" ;

    foreach my $r ( @@{$down_times} ) {
      print
	join(',', @@$r), "\n" ;
    }

    print "\n\n" ;

  }
}

sub debug_dump {
  my ($me, $field_width, $fields_per_line) = @@_ ;

  $field_width		||= 15 ;
  $fields_per_line	||= 7 ;

  my $format		= 0 ;

  foreach my $rep (@@{ $me->{REPORT_PERIODS} }) {

    format STDOUT_TOP = 

                          @@<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                          $rep

.

    $- = 0 ;

    my @@line ;
    @@line = map { my $x = $_ ; $x =~ s/PERCENT/%/; $x }
		@@{ $me->{REPORTS}{$rep}{FIELDNAMES} } ;

    &mkform($field_width, $fields_per_line, @@line)
      unless $format++ ;
    &do_write(@@line) ;

    foreach my $r ( @@{ $me->{REPORTS}{$rep}{RECORDS} } ) {
      @@line = @@$r ;
      &do_write(@@line) ;
    }
  }
}

{ 
  my @@base = (
	{ b => 60, u => 's' },
	{ b => 60, u => 'm' },
	{ b => 24, u => 'h' },
	{ b =>  7, u => 'd' },
	{ b =>  4, u => 'w' },
	{ b => 12, u => 'm' },
  ) ;

  sub time2ddhhmmss {
							# Rounds arg to nearest 5 minute interval
							# and returns hhmmss string.
    my $d = shift @@_ ;

    $d += 150 ;
    $d =  int($d/300) * 300 ;

    return ' '
      unless $d ;

    my ($s, $r, $i) ;
    $s = ' ' ;

    for ($i = 0; $d > 0; $i++) {
      $r = $d % $base[$i]{b} ;
      $s = "${r}$base[$i]{u} $s"
             if $r > 0 ;
      $d = ($d - $r) / $base[$i]{b} ;
    }

    $s ;

  }

}

sub mkform {

  my ($field_width, $fields_per_line) = @@_ ;

  my ($pics, $vals, $f1, $f, $form_body) ;

  $f1	= '@@' . '<' x 24 ;
  $f	= '@@' . '<' x $field_width ;

  $pics	= $f1 . " $f"   x ($fields_per_line - 1) ;
  $vals = 'shift(@@_), ' x  $fields_per_line ;
  $form_body = "format STDOUT = \n" ;

  $form_body .= <<EOFORM ;
$pics
$vals
EOFORM

  my $fields_remaining    = @@_ - $fields_per_line ;

  if ( $fields_remaining <= 0 ) {
    $form_body .= <<EOFORM ;
.
EOFORM

    eval $form_body ;

  } else {
    my $lines_remaining     = int($fields_remaining / ($fields_per_line - 1)) ;
    my $fields_on_last_line =     $fields_remaining % ($fields_per_line - 1) ;
    my $spaces              = ' ' x 25 ;

    $pics = $spaces . " $f"               x ($fields_per_line - 1) ;
    $vals = $spaces . ' shift(@@_), '      x ($fields_per_line - 1) ;

    $form_body .= <<EOFORM x $lines_remaining ;
$pics
$vals
EOFORM

    $pics = $spaces . " $f"               x $fields_on_last_line ;
    $vals = $spaces . ' shift(@@_), '      x $fields_on_last_line ;

    $form_body .= <<EOFORM ;
$pics
$vals
.
EOFORM

    eval  $form_body ;
  }

}

sub do_write {
							# Only exists to get vals into @@_ ;
  write ;
}

sub max_l {
  # my $max = shift @@_ or
  return undef 
    unless @@_ ;

  my $max = shift @@_ ;

  local $_ ;
  while ( defined($_ = shift @@_) ) {
    $max = $_
      if $_ >= $max
  }

  $max ;

}

sub comp {
							# Returns a comparator function to sort the avail records

							# Call with (alpha => 0|1, ascend => 0|1, fields =. [ f1.. ])

			my %sort_parms = (%default_sort, @@_) ;

							# eg
							# alpha => 0, $ascend => 1, fields = [TOTAL_TIME_DOWN, TOTAL_TIME_UNREACH]
							# TIME_DOWN and TIME_UNREACH are the same to the reader of the report;
							# they should be consolidated with some consolidation function (eg max
							# or sum of values).

			my $r ;

			if ( $sort_parms{alpha} ) {
			  $r = $sort_parms{ascend}
				 ?  sub {
					my %f = @@_ ;

					# package Nagios::Report ;
					$a->[$f{HOST_NAME}] cmp $b->[$f{HOST_NAME}]
				    }
				 :  sub {
					my %f = @@_ ;

					# package Nagios::Report ;
					$b->[$f{HOST_NAME}] cmp $a->[$f{HOST_NAME}]
				    } ;
			  return $r ;
			} else {
			  my $fields = $sort_parms{fields} ;
			  $r = $sort_parms{ascend}
				 ?  sub {
					my %f			= @@_ ;

					my @@field_indices	= @@f{@@$fields} ;

					my $a_max		= &max_l( @@{$a}[@@field_indices] ) ;
					my $b_max		= &max_l( @@{$b}[@@field_indices] ) ;
					$a_max 			<=> $b_max ;
				    }
				:  sub {
					my %f			= @@_ ;

					my @@field_indices	= @@f{@@$fields} ;

					my $a_max		= &max_l( @@{$a}[@@field_indices] ) ;
					my $b_max		= &max_l( @@{$b}[@@field_indices] ) ;
					$b_max 			<=> $a_max ;
				    } ;
			  return $r ;
			}
					
}

sub gen_local_cgi {
  my $user = shift @@_ ;
							# Generate a closure that will get an
							# availability report by running the CGI
							# from the shell.
  die "gen_local_cgi() called without username for access to local availability CGI: \$user: '$user'. Caller "
       . join(' ', caller)
    unless $user ;

  $ENV{REMOTE_USER}    = $user ;
  $ENV{REQUEST_METHOD} = REQUEST_METHOD ;

  return sub {
    my $url	       = shift @@_ ;
							# Must convert URL to query_string 
    my $qs ;
       ($qs = $url)      =~ s|http:.*?\?|| ;

    $ENV{QUERY_STRING} = $qs ;
    my @@x              = `${\NAG_AVAIL_CGI}` ;
							# Drop HTTP headers
    splice @@x, 0, 6 ;
    chomp  @@x ;
    wantarray ? @@x : join('', @@x) ;
  } ;

}

sub gen_web_page {
  my ($user, $pass) = @@_ ;

  die "gen_web_page() called without username or password for web page access: \$user: '$user', \$pass: '$pass'."
      . ' Caller ' . join(' ', caller)
    unless $user && $pass ;

  return sub {
							# lynx -dump will render the page as text
							# regardless of its content.
    USE_LYNX ?	`${\LYNX} -nolist -dump -width=1000 -auth=$user:$pass                '$_[0]'`
	     :	`${\WGET} --output-document=- --http-user=$user --http-passwd=$pass  '$_[0]' 2>/dev/null` ;
  } ;
}

sub down_records {
  my ($data_source, $avail_url, $start_time) = @@_ ;

  my $avail_rep = $data_source->($avail_url) ;

  my ($downs, @@down_recs, @@downs) ;

  if ( $avail_rep =~ /<html>/i ) {
							# XXX
							# Will fail if the availability CGI contains
							# different tags
							# <tr class='logEntriesEven'>
							# <td class='logEntriesEven'>01-11-2005 00:00:00</td>
							# <td class='logEntriesEven'>09-11-2005 15:09:59</td>
							# <td class='logEntriesEven'>8d 15h 9m 59s</td>
							# <td class='logEntriesUP'>HOST UP (HARD)</td>

    ($downs) = $avail_rep =~ /(<tr class='logEntriesEven'>.*)/s ;
    my @@rows = $downs     =~ m|(<tr.*?/tr>)|g ;
    @@down_recs            = map { s/<.*?>/ /g; $_ } @@rows ;
  } else {
							# Parsed HTML (by lynx -dump) looks like
							# 01-11-2005 00:00:00 09-11-2005 15:09:59 8d 15h 9m 59s
							# HOST UP (HARD)
    ($downs) = $avail_rep =~ m|( \d+-\d+-\d+ \s+ \d+:\d+:\d+ \s+ \d+-\d+-\d+ \s+ \d+:\d+:\d+ .* \Z) |msx ;
    @@down_recs            = split /\n/, $downs ;
  }

  local $_ ;

  foreach (@@down_recs) {

=begin comment

							# Must also deal with scheduled downtime.

  01-02-2006 00:00:00  01-02-2006 14:27:54  0d 14h 27m 54s  HOST UP (HARD)  PING OK - Packet loss = 0%, RTA = 7.26 ms  
  02-02-2006 20:24:42  02-02-2006 20:24:42  0d 0h 0m 0s     HOST DOWN (HARD)  CRITICAL - Plugin timed out after 10 seconds  

							VVVV This appears to be the correct entry
  02-02-2006 20:24:42  02-02-2006 20:47:54  0d 0h 23m 12s   HOST DOWNTIME START  Start of scheduled downtime  
							^^^^
  02-02-2006 20:47:54  02-02-2006 22:24:42  0d 1h 36m 48s   HOST UP (HARD)  PING OK - Packet loss = 0%, RTA = 0.66 ms  
  02-02-2006 22:24:42  03-02-2006 12:54:29  0d 14h 29m 47s  HOST DOWNTIME END  End of scheduled downtime  

=end comment

=cut


    next
      if /HOST UP|SERVICE OK|HOST DOWNTIME END/ ;

    my ($down, $up, $outage) = /
				(\d+-\d+-\d+ \s+ \d+:\d+:\d+) \s+
				(\d+-\d+-\d+ \s+ \d+:\d+:\d+) \s+
				( (?:\d+[wdhms] \s*)+ )
			       /x ;

    next
      if &before_start($down, $start_time) ;

    $outage =~ s/^(?:0[wdh] )*//g ;

    push @@downs, [$down, $up, $outage] ;
  }

  @@downs = ( [ (' ') x 3 ] ) 
    unless @@downs ;
  @@downs 

}

sub before_start {
  my ($t1_str, $t2) = @@_ ;
  my $t1 = &date2time($t1_str) ;

  return $t1 < $t2 ? 1 : 0 ;

}

sub date2time {
  local $_ = shift @@_ ;

  my ($dd, $mm, $mon, $yyyy, $h, $m, $s) ;

  if ( ($dd, $mm, $yyyy, $h, $m, $s) = m< (\d+)-(\d+)-(\d+) \s+ (\d+):(\d+):(\d+) >x ) {
							# 01-11-2005 00:00:00
							# DD-MM-YYYY HH:MM:SS Euro style dates with day first
    return EURO_DATE	? timelocal($s, $m, $h, $dd,     $mm - 1, $yyyy) 
			: timelocal($s, $m, $h, $mm - 1, $dd,     $yyyy)

  } elsif ( ($mon, $dd, $h, $m, $s, $yyyy) = /\w{3} (\w{3})\s+(\d+) (\d+):(\d+):(\d+) \w{3} (\d{4})/ ) {
							# Tue Nov 29 20:19:17 EST 2005
    $mon = "\u\L$mon" ;
    $mm  = MONTH->{$mon} ;
    return timelocal($s, $m, $h, $dd, $mm - 1, $yyyy) ;
  } elsif ( /now/ ) {
    return time() + 0 ;
  } else {

  }

}

sub interval2time {
  local $_ = shift @@_ ;
  my $t = 0 ;
  foreach my $x ( /(\d+[wdhms])/g ) {
                                                        # XXX
                                                        # Would be nice to do this without two matches but
                                                        # /g only counts the first match not the pair.
    my ($u, $b) = $x =~ /(\d+)([wdhms])/ ;
    $t += T->{$b} * $u ;
  }

  return $t ;

}

sub get_downs {
  my $r     = shift @@_ ;

  my @@downs = &down_records(@@_) ;
  my @@r     = map [ @@$r, @@$_ ], @@downs ;
  @@r ;
}

sub avail {
  my ($me, $rep_period) = @@_ ;
     $rep_period      ||= '24x7' ;
  die "Non existent report period '$rep_period': choose from " . join(' ', keys %{$me->{AVAIL_REPORTS}}) . '. Outahere.' 
    unless exists $me->{AVAIL_REPORTS}{$rep_period} ;

  my @@avail_recs = @@{ $me->{AVAIL_REPORTS}{$rep_period} } ;
  return wantarray
	? @@avail_recs 
	: Iterator	{
				shift @@avail_recs ;
  			} ;
}

sub report {
  my ($me, $rep_period) = @@_ ;
     $rep_period      ||= '24x7' ;
  die "Non existent report period '$rep_period': choose from " . join(' ', keys %{$me->{REPORTS}}) . '. Outahere.' 
    unless exists $me->{REPORTS}{$rep_period} ;

  my @@report_recs = @@{ $me->{REPORTS}{$rep_period}{RECORDS} } ;
  return wantarray
	? @@report_recs 
	: Iterator	{
				shift @@report_recs ;
  			} ;
}


sub to_dbh {
  my $me = shift @@_ ;

  eval { require DBI } ;
  die "Jeff Zuckers's _excellent_ CPAN module, DBI is needed by to_dbh(). Outahere. "
	if $@@ ;

  my @@dbh = () ;
							# Fruitless attempts to silence DBI - 
							# this appears to be a known issue of DBD::AnyData
							# as of Mar 2006.

							# local $SIG{__WARN__} = sub {} ;

  foreach my $rep_period ( @@{$me->REPORT_PERIODS} ) {

    my $dbh = DBI->connect('dbi:AnyData:') ;
							# my $dbh = DBI->connect('dbi:AnyData(Warn => 0, ...
							# Also fails to check warnings.
    $dbh->func(
	"tab_${rep_period}",
	'ARRAY',
	$me->{AVAIL_REPORTS}{$rep_period},
	# [ $me->avail($rep_period) ],
	{ col_names => join(',', @@{$me->FIELDNAMES}) },
	'ad_import'
    ) ;

    push @@dbh, $dbh ;

  }

  @@dbh ;

}

sub add_chart {
  my ($wkbook, $chart) = @@_ ;

  die "add_chart() called without hash ref to chart details eg { template => '/path/to/chart/template', link => .. }. Outahere."
    unless ref($chart) eq 'HASH' ;

  die "add_chart() called without a well formed 'template' value in \$chart_detail. Must be to a filename containing the Chart template. Outahere."
    unless exists($chart->{template}) && $chart->{template} && -e $chart->{template} && -s $chart->{template} ;

							# Add some extra formats to cover formats used in the charts.

  $wkbook->add_format(color => 1, bold => 1);
  $wkbook->add_format(color => 2);
  $wkbook->add_format(color => 3);

  $chart->{title} ||= 'Chart 1' ;
  $chart->{link}  ||= '=Sheet1!A1' ;

  $wkbook->add_chart_ext($chart->{template}, $chart->{title}) ;

  $wkbook->sheets(0)->store_formula($chart->{link}) ;

}
   
 
1 ;
 
# ---> That's all folks <-----

=head1 NAME

Nagios::Report - Perl class to filter and munge Nagios availability data

=head1 SYNOPSIS

  use Nagios::Report ;

  my $x = Nagios::Report->new(q<local_cgi nagios_web_server nagios_user>, [ '24x7' ], 'thismonth')
    or die "Can't construct Nagios::Report object." ;

  my @@these_fields = qw(
    HOST_NAME
    PERCENT_TOTAL_TIME_UP
    TOTAL_TIME_DOWN
    TIME_DOWN_HHMMSS
    TOTAL_TIME_UNREACHABLE
    TIME_UNREACH_HHMMSS
    AVAIL_URL
    TREND_URL
  ) ;

  $x->mkreport(
							# Field selector; display these fields only (in the listed order)

							# [] means display all the fields.

		\@@these_fields,
							# Record selector

							# Called with @@_ loaded # with a list of field names and
							# their vals for this record. Usually copied to a hash
							# so it can be used as one.

							# All records
							#   sub { 1 },
							# All records whose HOST_NAME starts with 'Alb'
							#   sub { my %F = @@_; my $h = $F{HOST_NAME}; $h =~ /^Alb/ },
							# Regrettably, this is _NOT_ the same since
							# @@_ can't be used as a hash.
							#   sub { $_{HOST_NAME} =~ /^Alb/ }
							# All records with an up time percent < 98%

		sub { my %F = @@_; my $u = $F{PERCENT_TOTAL_TIME_UP}; $u =~ s/%//; $u < 98 },

							# Sort order

		&comp( alpha => 0, ascend => 0, fields => [ qw(TOTAL_TIME_DOWN TOTAL_TIME_UNREACHABLE) ]),

							# Sorts descending by max of TOTAL_TIME_DOWN and TOTAL_TIME_UNREACHABLE

							# DIY sorters remember that $a and $b _must_ be in Nagios::Report package.
							# eg by TOTAL_DOWN_TIME descending.
							#   sub { my %f = @@_ ;
							#         package Nagios::Report;
							#         $b->[$f{TOTAL_TIME_DOWN}] <=> $a->[$f{TOTAL_TIME_DOWN}]
							#        },
							# Same as
							#  &comp(alpha => 0, ascend => 0, fields => ['TOTAL_TIME_DOWN'])
							# Same but harder,
							#  sub { package Nagios::Report; $b->[16] <=> $a->[16] },

							# Optional callback to add or mangle fields.

							# Add 2 fields for downtime vals in hours minutes and secs.

		sub {	$_ = shift @@_;
			my %F = @@_;
			push @@$_, 
				&t2hms($F{TOTAL_TIME_DOWN} ),
				&t2hms($F{TOTAL_TIME_UNREACHABLE} ) ;
			qw(TIME_DOWN_HHMMSS TIME_UNREACH_HHMMSS)
		    }

  ) ;

  $x->debug_dump ;
							# $x->csv_dump ;



=head1 DESCRIPTION

Gets the Nagios (http://wwww.Nagios.ORG/) B<All Hosts or Services> availability report (getting the results in CSV format)
and applies grep like filters, map like munging, and slice like field masks to produce a report which can be output in
various ways.

This class provides extra control over the content and disposition of the data produced by the
Nagios availability CGI, by writing for example a spreadsheet containing the selected data. 

Since the data originates from standard Nagios availability CGI, its results are no more accurate - and should be
exactly the same - as that CGI.


=head1 METHODS

=over 4

=item * new (DATA_SOURCE, REPORT_PERIODS, TIME_PERIOD, HOST_OR_SERVICE, PRE_FILTER)


This is the constructor of the Nagios::Report object.

C<DATA_SOURCE> is one of

  1 local_cgi - get the data by running the availability report CGI on the local host.
                Space separated values of the Nagios web server name/address and a Nagios user should follow.

  2 web_page  - get the data with LYNX or WGET from the named web server with the credential.
                Space separated values of the Nagios web server name/address, a Nagios user and that users password
                should follow.

  3 dev_debug - get __development__ data by running a client supplied callback.
                The _name_ of the callback should follow the tag, separated by spaces.
                NB the callback is assumed to be in the __main__ package.
                The callback is expected to return a string consisting of a schema
		(of CSV fieldnames) followed by lines of CSV data.

C<REPORT_PERIODS> is an optional reference to a list of names of Nagios time periods (conventionally defined in timeperiods.cfg) for which the availability data will be computed (by the CGI).

C<TIME_PERIOD> is an optional specification of the interval containing eligible availability records. It is scalar whose value 
is one of the Nagios interval names such as C<thisday>, C<thismonth>, or B<some> of the time forms used by the B<at> command.
(These forms include HHMM, HH:MM, DD.MM.YYYY MM/DD/YYYY and 24hour-time date).


Usually the timeperiod specifies an interval from some time in the past to now from which availability data will be selected.


However, if the argument is of the form B<start_24hour-time_date> B<-> B<end_24hour-time_date>, the availability data will be extracted from
the corresponding interval.


If this argument is omitted, the report is compiled for the B<thismonth> time period (ie any host availability record from the first of the current
month to the current time).

C<HOST_OR_SERVICE> is an optional scalar specifying the service report instead of the host report. If not set, the host
report is produced.

C<PRE_FILTER> is a callback that is called with the B<%F> hash (vi) set to the values of the field names for this availability
record. The constructor saves the availability report for B<all> the hosts and therefore if mkreport() then
requests the down records (vi), the availability CGI will be run for every host, whether or not the
filter in mkreport() actually selects them. To eliminate this waste and speed up the report, supply a callback like
  sub { my %F = @@_; $u = $F{PERCENT_TOTAL_TIME_UP}; $u =~ s/%//; $u < 99 } or
  sub { my %F = @@_; $F{TOTAL_TIME_DOWN} >= 600 }

The constructor gets the Nagios availability data by running the all hosts or all services report (in CSV format) 
and storing it in the object.

=item * mkreport (FIELD_LIST, SELECTOR_CALLBACK, ORDER_CALLBACK, MUNGE_CALLBACK, DOWNS)

E<10>
C<FIELD_LIST> is a reference to an array containing the field names that will appear in the report (a logical slice of the reports fields).
The fields appear in the report in the same order they have in this list. Fields added by C<MUNGE_CALLBACK> B<must> be specified
by C<FIELD_LIST> or they will not be shown in the report B<unless> this parameter is omitted. If the C<FIELD_LIST> is omitted,
B<all> the fields appear in the report, no matter where they come from (ie if fields are added by the C<MUNGE_CALLBACK>, the
new fields will appear in the report). If a field in C<FIELD_LIST> does not exist in the schema, it will not
appear in the report; the caller B<must> spell the field names correctly.


C<SELECTOR_CALLBACK> is a reference to a user supplied subroutine that will return B<true> if the record is to be included in the report.
The subroutine is called with an argument list of field names and their values for this record. This argument list
can be copied to a hash in the callback, conventionally named B<%F>, so that the field names can be used in expressions like

$F{HOST_NAME} =~ /^foo/

to select eligible records.

C<ORDER_CALLBACK> is a reference to a user supplied sort subroutine that determines the order of the records in the report. The
subroutine is called with an argument list of field names and their offsets in the records (eg (HOST_NAME, 0)). This argument list
can be copied to a hash in the callback, conventionally named B<%f>, so that the field names can be used in expressions like

$a->[$f{TOTAL_TIME_DOWN}] <=> $b->[$f{TOTAL_TIME_DOWN}]

to sort the records based on the field values.

C<MUNGE_CALLBACK> is a reference to a user supplied subroutine that is used to munge (transform input to output) the records. The subroutine
is called with a pointer to a record and a list of field names and their values for this record. The callback is expected to modify the record
in place, munging fields with expressions like

$F{TOTAL_DOWN_TIME} = 0

and or adding fields and their values.

If the callback adds fields to the record, it should append them to the end of the record and return the list of field names to mkreport().

mkreport() takes the availability data for each time period, adds outage data (which involves duplicating the
C<original> availability record as many times as there are outages), does any specified munging,  applies the filter discarding
records not rated as C<interesting> by the selector callback, before sorting and
slicing the results - dropping fields unwanted fields - and storing them as a C<report> for each time period.

mkreport() must be run before any of the output methods.

C<DOWNS> is an optional scalar flag. If the flag is set the availability
report - the detailed report with the outage log - for B<each> host is fetched and the outage records extracted.

Then, for each of the outage records, the availability record is duplicated followed by the outage data: when the host went down, when
it came back up, and the hours minutes seconds formatted value of the outage. These fields are named DOWN, UP, and OUTAGE.

Since the availability data is repeated for each outage record, C<DOWNS> can make the report look messy. It is best used
with a small number of report fields (eg HOST_NAME, PERCENT_TOTAL_UP_TIME). Also, since the outage records are added B<before>
filtering by the selector callback, you B<should> set a pre-filter in the constructor.

The callbacks are run in this order

=over 4

=item 1 DOWNS (the availability report is retrieved for B<all> hosts/services so that the selector
        can filter on the added fields, by for example, discarding all records with small outages).

=item 2 MUNGE_CALLBACK

=item 3 SELECTOR_CALLBACK

=item 4 ORDER_CALLBACK

=item 5 the field slice (ie discard all but the FIELD_LIST fields)

=back

=item * to_dbh

If the DBD::AnyData module is installed, returns an array of DBI data handles
connected to the pseudo-databases containing one table populated
with the availability data corresponding to each of the REPORT_PERIODS
specified in the constructor call.

Each table is named C<tab_REPORT_PERIOD>. For example, after constructing the
Nagios::Report object with the default report period, the table is named B<tab_24x7>.

This method allows the use of SQL statements as an alternative means of filtering
and modifying the data. For example,

  $SQL =<<SQL;
  SELECT host_name,
       total_time_down,
       time_down_scheduled,
       time_down_unscheduled,
  FROM tab_24x7
    WHERE total_time_down   >= 300
  SQL

  $x   = Nagios::Report->new(local_cgi Nagios-server Nagios-contact) ;
  ($d) = $x->to_dbh ;
  $s   = $d->prepare($SQL) ;
  $s->execute ;
  $s->dump_results ;

Unfortunately, the use of DBD::AnyData does not invalidate this module because
the SQL grammar implemented by SQL::Statement (on behalf of DBD::AnyData) is not as
extensive as the SQL grammar provided by an RDBMS. If one
is determined to process with SELECT, load the data into an RDBMS of choice ( 
MySQL comes to mind) and use the corresponding Perl DBD module on that. There is an example of
a script to do so included in the distribution.

Also, as of version 0.002, there are noisy complaints from DBI when DBD::AnyData
processes SQL. This appears to be a well known problem (Mar 2006) with
AnyData. 

=item * excel_dump (EXCEL_FILENAME)

excel_dump writes a Workbook in the specified filename. The workbook contains a worksheet for each report (ie one for each time period
specified by the constructor). excel_dump() requires the John McNamara's B<excellent> CPAN module, Spreadsheet::WriteExcel.

E<10>
C<EXCEL_FILENAME> is the path of the file in which the Excel workbook will be written.

=item * csv_dump 

CSV formatted output on STDOUT. Note that this mainly useful for debugging since the 
cell data is not formatted should it be imported by Excel

=item * dev_debug (FIELD_WIDTH, FIELDS_PER_LINE)

report formatted output on STDOUT.

=head1 ACCESSORS/MUTATORS

Acessors and mutators are provided for most of the attributes in the object. The module makes B<no>
use of them and, except for those below, are probably of little interest. Unless noted, the caller is
responsible for processing the attribute type correctly; the acessor does nothing more
than hand back a ref.

=over 4

=item * report (REPORT_PERIOD)

Accessor that returns, in scalar context, an iterator that when kicked returns each of the
records produced by mkreport() for that report period; in array context, returns the list of those records.

Note that the 'records' are refs to anonymous lists containing only those fields specified by the field list parameter of
mkreport().

=item * avail (REPORT_PERIOD)

Accessor that returns, in scalar context, an iterator that when kicked returns each of the
records returned by the constructor; in array context, returns the list of those records.
Note that the 'records' are refs to anonymous lists containing all of the Nagios availability report fields
augmented by the two extra fields AVAIL_URL and TREND_URL (vi).

The iterator is a code ref that, when called, will return a ref to the next
availability record. Without a REPORT_PERIOD,
returns an iterator to the B<24x7> data, otherwise the availability data corresponding
to that report period (if it exists). If the methods of this class are not
useful, then the iterator allows the caller transform the availability data with
B<imap> and filter it with B<igrep>. 

=item * FIELDNAMES

Ref to a list of field names eg @@fields = @@{$me->FIELDNAMES}

=item * FIELDS

Ref to a hash of field indices keyed by field name eg %f = %{$me->FIELDS}}

=item * SERVER

Hostname of the server on which the Nagios CGIs can be found.

=item * SOURCE_TAG

How the availability data will be fetched.

=item * REPORT_TYPE

host | service report

=item * DATA_SOURCE

Reference to a subroutine that will fetch the availability data.

=item * REPORTS

Ref to a hash keyed by report period containing a hash keyed by FIELDNAMES and RECORDS.
The latter key refers to a list containing the records selected and munged by mkreport().
Note that each record contains only those fields specified by the field list parm of 
mkreport().

See report (REPORT_PERIOD).

=item * AVAIL_REPORTS

Ref to a hash keyed by report period containing a ref to a list containing all
those records returned by the Nagios availability report that are accepted by the
pre-filter.

Unlike REPORTS, each record contains all the Nagios reporting fields including
the fields AVAIL_URL and TREND_URL whose values are hyperlinks to the Nagios
trend and availability reports for the host named HOST_NAME.


See avail (REPORT_PERIOD).

=back

=head1 SUBROUTINES

=over 4

=item * max_l ( LIST_OF_NUMERIC_VALS)

Returns the maximum value in the list. Does not handle non-numeric values.

=item * comp ( OPTION_HASH )

Returns a ref to a comparator function that determines the order of the records and can be used 
as the B<ORDER_CALLBACK> argument of B<mkreport()>.

C<OPTION_HASH> is an B<optional> hash with keys

C<alpha> Sort by the HOST_NAME field if set, otherwise by the maximum of the fields value.

C<ascend> Sort in ascending order if set.

C<fields> The comparator function orders the records based on the B<maximum> of the B<numeric> field values. Only applies if alpha
is not set. C<fields> is a reference to an array of numeric field names. 

  eg &comp( alpha => 1, ascend => 1 )

  Returns a ref to function that orders the records by the HOST_NAME field.

  eg &comp()

  Same as calling comp with ( alpha => 1, ascend => 1 )

  eg &comp( alpha => 0, ascend => 1, fields => [TOTAL_TIME_DOWN, TOTAL_TIME_UNREACHABLE] )

  Returns a ref to a function that orders the records by the maximum of the values of the
  TOTAL_TIME_DOWN and TOTAL_TIME_UNREACHABLE fields.  


=item * t2hms (TIME_T)

Returns the argument formatted by weeks, days, hours, minutes and seconds eg &t2hms(300) -> 5m.

=item * d2t (time_string)

Returns the time_t value of the string formatted as either a localtime, US (MM-DD-YYYY) or EURO date (DD-MM-YYY).

=item * i2t (interval)

Returns the time_t value of the string formatted as an interval of time ie one that matches (?:\d+[wdhms]\s*)+
eg 3h 5m 30s (3 hours 5 minutes and 30 seconds).

=back

=head1 BUGS

=over 4

=item * Does not do much more than the standard availability CGI. The report data
        is no more accurate than Nagios.

=item * The B<comp()> subroutine does not behave well if called with fields whose values are non numeric.

=item * Anything good in this module comes from B<Higher Order Perl>; the rest comes from the author.

=item * The module does not buy much more than rolling ones own with DBD::AnyData. Had I been more
        aware of the fundamental utility and importance of RDBMS data, this module would probably
        not exist. OTOH, this module now provides some sort of programmatic access to Nagios availability
        data that Nagios has not had (AFAIK) hitherto.

=back


=head1 SEE ALSO

perl(1).

Nagios (http://www.Nagios.ORG/)


=head1 AUTHOR

Stanley Hopcroft <HopcroftS@@CPAN.Org>

=head1 COPYRIGHT

Copyright (c) 2005 Stanley Hopcroft. All rights reserved.
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut



@


1.68
log
@1 POD changes
2 Fiddle with to_dbh() to try and suppress loud complaints about
  'DBI handle 0x9b44820 cleared whilst still active.' and lots of
   context on STDOUT from DBI ..
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.67 2006/03/05 22:13:01 sh1517 Exp sh1517 $
d564 1
a564 1
  my ($me, $excel_filename) = @@_ ;
d636 3
d1071 1
a1071 1
  die "Tim Bunce's 's _excellent_ CPAN module, DBI is needed by to_dbh(). Outahere. "
d1075 3
a1077 2
							# Fruitless attempts to silence DBI - prob bug
							# in old 5.8.0 DBI I am using.
d1102 25
d1365 1
a1365 1
SELECT host_name,
d1369 4
a1372 5
       time_down_scheduled + time_down_unscheduled                         AS sum_sched_unsched,
       total_time_down     - (time_down_scheduled + time_down_unscheduled) AS delta_time_down
FROM tab_24x7
  WHERE total_time_down   >= 300
SQL
d1379 11
@


1.67
log
@1 Add support for date ranges (start date - end data) to time_period argument
  of constructor.
2 Add to_dbh() method that returns a list of  DBI handles enabling one to
  use select and friends on the availability data.
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.66 2006-01-14 20:10:05+11 sh1517 Exp sh1517 $
d953 1
d1072 4
d1080 2
a1081 1

d1085 2
a1086 1
	[ $me->avail($rep_period) ],
a1097 1

d1099 1
a1099 1
 1 ;
a1100 4

1 ;


d1201 1
a1201 1
=item * new (DATA_SOURCE, REPORT_PERIODS, TIME_PERIODS, HOST_OR_SERVICE, PRE_FILTER)
d1225 11
a1235 4
(These forms include HHMM, HH:MM, DD.MM.YYYY MM/DD/YYYY and 24hour time date).
The timeperiod specifies an interval from some time in the past to now from which availability data will be selected.
If this argument is 
omitted, the report is compiled for the B<thismonth> time period (ie any host availability record from the first of the current
d1322 28
d1381 1
d1389 2
a1390 1
Note that the 'records' are refs to anonymous lists containing all of the Nagios availability report fields.
d1438 4
a1441 1
Unlike REPORTS, each record contains all the Nagios reporting fields.
d1509 5
@


1.66
log
@1 Reformat the accessor POD
2 Change the name of the (former) Iterator avail_it(). Now this
  is one of two accessors (avail() and report()) that return
  a list of records in array context and an iterator otherwise.
Note that report() is the only reasonable way for client
code to use the report for other purposes than output; using the
REPORT accessor requires the caller to know the internals.
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.65 2006-01-13 17:05:22+11 sh1517 Exp sh1517 $
d19 1
a19 1
$VERSION = '0.015';
d25 2
a26 2
use constant CGI_PATH			=> '' ;
use constant LYNX			=> '/usr/local/bin/lynx' ;
d299 13
a311 2
  my ($t1, $t2)		= exists $stime_etime{$time_period}	? $stime_etime{$time_period}->($time_period, [ localtime ])
								: $stime_etime{__DEFAULT__}->( $time_period, [ localtime ]) ;
d939 17
d957 1
a957 1
      if /HOST UP|SERVICE OK/ ;
d1062 34
@


1.65
log
@1 Add last_n_mins timeperiod.
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.64 2005-12-23 19:47:58+11 sh1517 Exp sh1517 $
d25 2
a26 2
use constant CGI_PATH			=> '/usr/lib/nagios/cgi/' ;
use constant LYNX			=> '/usr/bin/lynx' ;
d1006 1
a1006 1
sub avail_it {
d1009 23
a1031 4
  my @@avail_recs        = @@{ $me->{AVAIL_REPORTS}{$rep_period} } ;
  return Iterator {
    shift @@avail_recs ;
  } ;
d1269 1
a1269 1
=item * ACCESSORS/MUTATORS
d1272 2
a1273 2
use of them and, except for those below, are probably of little interest. The caller is
responsible for processing the attribute type correctly.; the acessor does nothing more
d1278 21
a1298 1
=item 1 FIELDNAMES
d1302 1
a1302 1
=item 2 FIELDS
d1306 1
a1306 1
=item 3 SERVER
d1310 1
a1310 1
=item 4 SOURCE_TAG
d1314 1
a1314 1
=item 5 REPORT_TYPE
d1318 1
a1318 1
=item 6 DATA_SOURCE
d1322 1
a1322 1
=item 7 REPORTS
d1324 4
a1327 3
Ref to a hash keyed by report period containing a ref to a list of all field values
(ie those from the Nagios CGI + outage fields + fields added by munging) for all the
Nagios CGI records.
d1329 1
a1329 1
=item 8 AVAIL_REPORTS
d1331 1
a1331 3
Ref to a hash keyed by report period containing a ref to a list containing those 
records selected by the filter, which has only those fields specified when the
report was generated by mkreport().
d1333 3
a1335 1
=back
d1337 1
a1337 1
=item * ITERATOR avail_it (REPORT_PERIOD)
d1339 1
a1339 7
Returns an Iterator (a code ref) that when called will return a ref to the next
availability record (a list of availability data produced by the constructor). Without a REPORT_PERIOD,
returns an iterator to the B<24x7> data, otherwise the availability data corresponding
to that report period (if it exists). If the methods of this class are not
useful, then the iterator allows the caller transform the availability data with
B<imap> and filter it with B<igrep>. The object B<must> be constructed before the
iterator.
@


1.64
log
@1 Return an iterator (over $me->{AVAIL_REPORTS}{rep_period}).
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.63 2005-12-23 18:40:42+11 sh1517 Exp sh1517 $
d25 2
a26 2
use constant CGI_PATH			=> '' ;
use constant LYNX			=> '/usr/local/bin/lynx' ;
d131 7
d181 1
a181 1
				if ( ($days)       = /^last(\d+)day/ ) {
d184 1
a184 1
				} elsif ( ($hours) = /^last(\d+)hour/ ) {
d187 4
d199 1
a199 1
				} elsif ( ($h, $m) = /^ (\d\d) :? (\d\d) $/x ) {
@


1.63
log
@1 Add POD describing the 'accessors'.
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.62 2005-12-23 13:58:17+11 sh1517 Exp sh1517 $
d93 2
d995 9
d1285 10
@


1.62
log
@0.015
Substantive changes to
  1. recompute schema and field map after field addition (by
     adding down records or munging) but before filtering
     and sorting.

     This should allow record selection based on any new fields.
  2. check that the current approach of doing tests inside
     map loops is as efficient as taking them out (run time
     selection of loop or building a loop with eval).

  3. confirm policy that added fields (including outage fields)
     always appear in the report without specific request.
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.60 2005-12-18 17:18:31+11 sh1517 Exp sh1517 $
d25 2
a26 2
use constant CGI_PATH			=> '/usr/lib/nagios/cgi/' ;
use constant LYNX			=> '/usr/bin/lynx' ;
d1081 1
a1081 1
Gets the Nagios (http://wwww.Nagios.ORG/) B<All Hosts or Services> availability report (in CSV format)
d1131 1
a1131 1
requests the down records (vi), the availability report will be run for every host, whether or not the
d1133 2
a1134 1
  sub { my %F = @@_; $u = $F{PERCENT_TOTAL_TIME_UP}; $u =~ s/%//; $u < 99 }.
d1143 6
a1148 2
The fields appear in the report in the same order they have in this list. Fields added by MUNGE_CALLBACK B<must> be specified
by C<FIELD_LIST> or they will not be shown in the report.
d1176 5
a1180 2
mkreport() takes the availability data for each time period, applies the filter and does any specified munging, before
slicing the results - masking fields that are not wanted in the report - and storing them as a report for each time period.
d1191 1
a1191 1
filtering by the selector callback, you should set a pre-filter in the constructor.
d1197 2
a1198 1
=item 1 MUNGE_CALLBACK
d1200 1
a1200 2
=item 2 DOWNS (the availability report is retrieved for B<all> hosts/services so that the selector
        can filter on the added fields, by for example, discarding all records with small outages).
a1209 2
The order is important because later callbacks can use fields such as OUTAGE that are added before.
      
d1228 47
d1337 1
a1337 1
=item * Anything good in this comes from B<Higher Order Perl>; the rest comes from the author.
@


1.61
log
@1 Change version to 0.014 (no other changes).
@
text
@d19 1
a19 1
$VERSION = '0.014';
d449 1
d456 2
a457 1
							#           transform list
d459 2
a460 2
							# Do the transform - to add
							# fields first - and then 
d467 1
a467 1
    my (%F, @@new_field_names) ;
d469 1
a469 2
							# Add records: 1 rec -> (n-1) recs
							#                        n: number of outages.
d471 4
a474 2
							# XXX slow
    my $avail_url ;
d476 2
a477 14
    my @@r = map {	$avail_url = $_->[1];
			$_         = $_->[0];
			$add_downs && $me->{SOURCE_TAG} =~ /^(?:web_page|local_cgi)/
				? get_downs($_, $me->{DATA_SOURCE}, $avail_url, $me->{T1})
				: $_
                }
							# Transform rec by adding or munging fields

                map {
			@@F{@@{$me->{FIELDNAMES}}} = @@$_ ;
			@@new_field_names = $alter->($_, %F) if $alter ;
			[ $_, $F{AVAIL_URL} ]
		    }
                         @@{ $me->{AVAIL_REPORTS}{$rep} } ;
d479 10
a488 2
    push @@new_field_names, qw(DOWN UP OUTAGE)
      if $add_downs ;
d490 10
a499 4
    if ( @@new_field_names && ! scalar(grep $_ eq $new_field_names[0], @@{$me->{FIELDNAMES}}) ) {
      push @@{ $me->{FIELDNAMES} }, @@new_field_names ;
      @@fields{@@{$me->{FIELDNAMES}}} = 0 .. $#{$me->{FIELDNAMES}} ;
      $me->{FIELDS} = { %fields} ;
d502 22
@


1.60
log
@1 Correct POD for changes to the dev_debug data source.
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.59 2005-12-17 22:21:07+11 sh1517 Exp sh1517 $
d19 1
a19 1
$VERSION = '0.013_HACK';
d25 2
a26 2
use constant CGI_PATH			=> '' ;
use constant LYNX			=> '/usr/local/bin/lynx' ;
@


1.59
log
@1 Turn the dev_debug source tag into a means of providing the
  constructor with a symbolic ref of a callback in the client
  that will generate the test data (often by reading the
  DATA handle in the client code).
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.58 2005-12-17 16:24:34+11 sh1517 Exp sh1517 $
d255 4
a258 1
  dev_debug	=> sub { no strict 'refs' ;
d1083 5
a1087 1
  3 dev_debug - read data from the DATA filenhandle (in the module text). For development only.
@


1.58
log
@1 Add some accessors. On the way to getting rid of the test data
  from the __DATA__handle. This should always have been in client code.
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.57 2005-12-14 16:07:15+11 sh1517 Exp sh1517 $
d19 1
a19 1
$VERSION = '0.013';
d253 6
a258 1
  dev_debug	=> sub { \&from_data_handle },
d287 3
a289 2
  ($source_tag, $data)	= $source_tag eq 'dev_debug'	? ('dev_debug', 'BOGON SERVER BOGON_USER BOGON_PW')
							: split /\s+/, $source_tag, 2 ;
a393 22
{ 
  my $data ; 

  sub from_data_handle {

    my $rep_period = shift @@_ ;

    my @@avail_rep = () ;

    local $/ = undef ;
    $data = <DATA> 
      unless $data ;

    my ($r) = $data =~ /^# $rep_period\n(.*?)^END_OF_FILE_MARKER/sm ;
  
    @@avail_rep = split /\n/, $r ;

    @@avail_rep ;

  }
}

a1275 79
__DATA__
# 24x7
HOST_NAME, TIME_UP_SCHEDULED, PERCENT_TIME_UP_SCHEDULED, PERCENT_KNOWN_TIME_UP_SCHEDULED, TIME_UP_UNSCHEDULED, PERCENT_TIME_UP_UNSCHEDULED, PERCENT_KNOWN_TIME_UP_UNSCHEDULED, TOTAL_TIME_UP, PERCENT_TOTAL_TIME_UP, PERCENT_KNOWN_TIME_UP, TIME_DOWN_SCHEDULED, PERCENT_TIME_DOWN_SCHEDULED, PERCENT_KNOWN_TIME_DOWN_SCHEDULED, TIME_DOWN_UNSCHEDULED, PERCENT_TIME_DOWN_UNSCHEDULED, PERCENT_KNOWN_TIME_DOWN_UNSCHEDULED, TOTAL_TIME_DOWN, PERCENT_TOTAL_TIME_DOWN, PERCENT_KNOWN_TIME_DOWN, TIME_UNREACHABLE_SCHEDULED, PERCENT_TIME_UNREACHABLE_SCHEDULED, PERCENT_KNOWN_TIME_UNREACHABLE_SCHEDULED, TIME_UNREACHABLE_UNSCHEDULED, PERCENT_TIME_UNREACHABLE_UNSCHEDULED, PERCENT_KNOWN_TIME_UNREACHABLE_UNSCHEDULED, TOTAL_TIME_UNREACHABLE, PERCENT_TOTAL_TIME_UNREACHABLE, PERCENT_KNOWN_TIME_UNREACHABLE, TIME_UNDETERMINED_NOT_RUNNING, PERCENT_TIME_UNDETERMINED_NOT_RUNNING, TIME_UNDETERMINED_NO_DATA, PERCENT_TIME_UNDETERMINED_NO_DATA, TOTAL_TIME_UNDETERMINED, PERCENT_TOTAL_TIME_UNDETERMINED
"16_Mort_St_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Adelaide_State_Office_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Adelaide_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Albany_DEST_router", 0, 0.000%, 0.000%, 2039937, 99.746%, 99.746%, 2039937, 99.746%, 99.746%, 0, 0.000%, 0.000%, 290, 0.014%, 0.014%, 290, 0.014%, 0.014%, 0, 0.000%, 0.000%, 4900, 0.240%, 0.240%, 4900, 0.240%, 0.240%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Albany_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2040237, 99.761%, 99.761%, 2040237, 99.761%, 99.761%, 0, 0.000%, 0.000%, 4890, 0.239%, 0.239%, 4890, 0.239%, 0.239%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Albury_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Albury_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Armidale_DEST_router", 0, 0.000%, 0.000%, 2042717, 99.882%, 99.882%, 2042717, 99.882%, 99.882%, 0, 0.000%, 0.000%, 290, 0.014%, 0.014%, 290, 0.014%, 0.014%, 0, 0.000%, 0.000%, 2120, 0.104%, 0.104%, 2120, 0.104%, 0.104%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Armidale_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2043017, 99.897%, 99.897%, 2043017, 99.897%, 99.897%, 0, 0.000%, 0.000%, 2110, 0.103%, 0.103%, 2110, 0.103%, 0.103%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Bendigo_DEST_router", 0, 0.000%, 0.000%, 955207, 46.706%, 46.706%, 955207, 46.706%, 46.706%, 0, 0.000%, 0.000%, 1089920, 53.294%, 53.294%, 1089920, 53.294%, 53.294%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Bendigo_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Brisbane_State_Office_DEST_router", 0, 0.000%, 0.000%, 2045057, 99.997%, 99.997%, 2045057, 99.997%, 99.997%, 0, 0.000%, 0.000%, 70, 0.003%, 0.003%, 70, 0.003%, 0.003%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Brisbane_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Broken_Hill_DEST_router", 0, 0.000%, 0.000%, 2041059, 99.801%, 99.801%, 2041059, 99.801%, 99.801%, 0, 0.000%, 0.000%, 280, 0.014%, 0.014%, 280, 0.014%, 0.014%, 0, 0.000%, 0.000%, 3788, 0.185%, 0.185%, 3788, 0.185%, 0.185%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Broken_Hill_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2041239, 99.810%, 99.810%, 2041239, 99.810%, 99.810%, 0, 0.000%, 0.000%, 3888, 0.190%, 0.190%, 3888, 0.190%, 0.190%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Bunbury_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Bunbury_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"CyberTrust_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"DARSW000", 0, 0.000%, 0.000%, 2044239, 99.957%, 99.957%, 2044239, 99.957%, 99.957%, 0, 0.000%, 0.000%, 888, 0.043%, 0.043%, 888, 0.043%, 0.043%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"DUBSW200", 0, 0.000%, 0.000%, 1881740, 92.011%, 92.011%, 1881740, 92.011%, 92.011%, 0, 0.000%, 0.000%, 163387, 7.989%, 7.989%, 163387, 7.989%, 7.989%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Darwin_State_Office_DEST_router", 0, 0.000%, 0.000%, 2043678, 99.929%, 99.929%, 2043678, 99.929%, 99.929%, 0, 0.000%, 0.000%, 1449, 0.071%, 0.071%, 1449, 0.071%, 0.071%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Darwin_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045027, 99.995%, 99.995%, 2045027, 99.995%, 99.995%, 0, 0.000%, 0.000%, 100, 0.005%, 0.005%, 100, 0.005%, 0.005%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Dubbo_DEST_router", 0, 0.000%, 0.000%, 1881750, 92.011%, 92.011%, 1881750, 92.011%, 92.011%, 0, 0.000%, 0.000%, 163377, 7.989%, 7.989%, 163377, 7.989%, 7.989%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Dubbo_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Griffith_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Griffith_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Gympie_DEST_router", 0, 0.000%, 0.000%, 2044967, 99.992%, 99.992%, 2044967, 99.992%, 99.992%, 0, 0.000%, 0.000%, 160, 0.008%, 0.008%, 160, 0.008%, 0.008%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Gympie_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Hobart_State_Office_DEST_router", 0, 0.000%, 0.000%, 2044447, 99.967%, 99.967%, 2044447, 99.967%, 99.967%, 0, 0.000%, 0.000%, 680, 0.033%, 0.033%, 680, 0.033%, 0.033%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Hobart_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Kempsey_DEST_router", 0, 0.000%, 0.000%, 1715529, 83.884%, 83.884%, 1715529, 83.884%, 83.884%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 329598, 16.116%, 16.116%, 329598, 16.116%, 16.116%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Kempsey_Optus_router_PE_interface", 0, 0.000%, 0.000%, 1715518, 83.883%, 83.883%, 1715518, 83.883%, 83.883%, 0, 0.000%, 0.000%, 329609, 16.117%, 16.117%, 329609, 16.117%, 16.117%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Lismore_DEST_router", 0, 0.000%, 0.000%, 2043317, 99.911%, 99.911%, 2043317, 99.911%, 99.911%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 1810, 0.089%, 0.089%, 1810, 0.089%, 0.089%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Lismore_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2043317, 99.911%, 99.911%, 2043317, 99.911%, 99.911%, 0, 0.000%, 0.000%, 1810, 0.089%, 0.089%, 1810, 0.089%, 0.089%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Mackay_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Mackay_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Melbourne_State_Office_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Melbourne_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Mildura_DEST_router", 0, 0.000%, 0.000%, 2044796, 99.984%, 99.984%, 2044796, 99.984%, 99.984%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 331, 0.016%, 0.016%, 331, 0.016%, 0.016%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Mildura_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2044795, 99.984%, 99.984%, 2044795, 99.984%, 99.984%, 0, 0.000%, 0.000%, 332, 0.016%, 0.016%, 332, 0.016%, 0.016%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Moree_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Moree_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Morwell_DEST_router", 0, 0.000%, 0.000%, 2044542, 99.971%, 99.971%, 2044542, 99.971%, 99.971%, 0, 0.000%, 0.000%, 10, 0.000%, 0.000%, 10, 0.000%, 0.000%, 0, 0.000%, 0.000%, 575, 0.028%, 0.028%, 575, 0.028%, 0.028%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Morwell_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2044031, 99.946%, 99.946%, 2044031, 99.946%, 99.946%, 0, 0.000%, 0.000%, 1096, 0.054%, 0.054%, 1096, 0.054%, 0.054%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Newcastle_DEST_router", 0, 0.000%, 0.000%, 2043736, 99.932%, 99.932%, 2043736, 99.932%, 99.932%, 0, 0.000%, 0.000%, 1391, 0.068%, 0.068%, 1391, 0.068%, 0.068%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Newcastle_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Nowra_DEST_router", 0, 0.000%, 0.000%, 2043587, 99.925%, 99.925%, 2043587, 99.925%, 99.925%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 1540, 0.075%, 0.075%, 1540, 0.075%, 0.075%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Nowra_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2043587, 99.925%, 99.925%, 2043587, 99.925%, 99.925%, 0, 0.000%, 0.000%, 1540, 0.075%, 0.075%, 1540, 0.075%, 0.075%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"ORASW200", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Orange_DEST_router", 0, 0.000%, 0.000%, 2044829, 99.985%, 99.985%, 2044829, 99.985%, 99.985%, 0, 0.000%, 0.000%, 251, 0.012%, 0.012%, 251, 0.012%, 0.012%, 0, 0.000%, 0.000%, 47, 0.002%, 0.002%, 47, 0.002%, 0.002%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Orange_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045080, 99.998%, 99.998%, 2045080, 99.998%, 99.998%, 0, 0.000%, 0.000%, 47, 0.002%, 0.002%, 47, 0.002%, 0.002%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Taree_DEST_router", 0, 0.000%, 0.000%, 2043105, 99.901%, 99.901%, 2043105, 99.901%, 99.901%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 2022, 0.099%, 0.099%, 2022, 0.099%, 0.099%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Taree_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2043105, 99.901%, 99.901%, 2043105, 99.901%, 99.901%, 0, 0.000%, 0.000%, 2022, 0.099%, 0.099%, 2022, 0.099%, 0.099%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Thursday_Island_DEST_router", 0, 0.000%, 0.000%, 2024449, 98.989%, 98.989%, 2024449, 98.989%, 98.989%, 0, 0.000%, 0.000%, 20678, 1.011%, 1.011%, 20678, 1.011%, 1.011%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Thursday_Island_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Toowoomba_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Toowoomba_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Walgett_DEST_router", 0, 0.000%, 0.000%, 2043191, 99.905%, 99.905%, 2043191, 99.905%, 99.905%, 0, 0.000%, 0.000%, 1936, 0.095%, 0.095%, 1936, 0.095%, 0.095%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Walgett_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Wollongong_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Wollongong_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Wyong_DEST_router", 0, 0.000%, 0.000%, 2042682, 99.880%, 99.880%, 2042682, 99.880%, 99.880%, 0, 0.000%, 0.000%, 125, 0.006%, 0.006%, 125, 0.006%, 0.006%, 0, 0.000%, 0.000%, 2320, 0.113%, 0.113%, 2320, 0.113%, 0.113%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Wyong_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2042807, 99.887%, 99.887%, 2042807, 99.887%, 99.887%, 0, 0.000%, 0.000%, 2320, 0.113%, 0.113%, 2320, 0.113%, 0.113%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"acisp050", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"acisp051", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"acisp052", 0, 0.000%, 0.000%, 2044867, 99.987%, 99.987%, 2044867, 99.987%, 99.987%, 0, 0.000%, 0.000%, 260, 0.013%, 0.013%, 260, 0.013%, 0.013%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"igf_dns_vip", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"nms_segment_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
END_OF_FILE_MARKER
# Test
HOST_NAME, TIME_UP_SCHEDULED, PERCENT_TIME_UP_SCHEDULED, PERCENT_KNOWN_TIME_UP_SCHEDULED, TIME_UP_UNSCHEDULED, PERCENT_TIME_UP_UNSCHEDULED, PERCENT_KNOWN_TIME_UP_UNSCHEDULED, TOTAL_TIME_UP, PERCENT_TOTAL_TIME_UP, PERCENT_KNOWN_TIME_UP, TIME_DOWN_SCHEDULED, PERCENT_TIME_DOWN_SCHEDULED, PERCENT_KNOWN_TIME_DOWN_SCHEDULED, TIME_DOWN_UNSCHEDULED, PERCENT_TIME_DOWN_UNSCHEDULED, PERCENT_KNOWN_TIME_DOWN_UNSCHEDULED, TOTAL_TIME_DOWN, PERCENT_TOTAL_TIME_DOWN, PERCENT_KNOWN_TIME_DOWN, TIME_UNREACHABLE_SCHEDULED, PERCENT_TIME_UNREACHABLE_SCHEDULED, PERCENT_KNOWN_TIME_UNREACHABLE_SCHEDULED, TIME_UNREACHABLE_UNSCHEDULED, PERCENT_TIME_UNREACHABLE_UNSCHEDULED, PERCENT_KNOWN_TIME_UNREACHABLE_UNSCHEDULED, TOTAL_TIME_UNREACHABLE, PERCENT_TOTAL_TIME_UNREACHABLE, PERCENT_KNOWN_TIME_UNREACHABLE, TIME_UNDETERMINED_NOT_RUNNING, PERCENT_TIME_UNDETERMINED_NOT_RUNNING, TIME_UNDETERMINED_NO_DATA, PERCENT_TIME_UNDETERMINED_NO_DATA, TOTAL_TIME_UNDETERMINED, PERCENT_TOTAL_TIME_UNDETERMINED
"16_Mort_St_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Adelaide_State_Office_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Adelaide_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Albany_DEST_router", 0, 0.000%, 0.000%, 2039937, 99.746%, 99.746%, 2039937, 99.746%, 99.746%, 0, 0.000%, 0.000%, 290, 0.014%, 0.014%, 290, 0.014%, 0.014%, 0, 0.000%, 0.000%, 4900, 0.240%, 0.240%, 4900, 0.240%, 0.240%, 0, 0.000%, 0, 0.000%, 0, 0.000%
END_OF_FILE_MARKER
@


1.57
log
@1 Export interval2time() as i2t() for use in callbacks processing outage intervals.
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.56 2005-12-14 14:21:40+11 sh1517 Exp sh1517 $
d25 2
a26 2
use constant CGI_PATH			=> '/usr/lib/nagios/cgi/' ;
use constant LYNX			=> '/usr/bin/lynx' ;
d195 3
a197 2
				} elsif ( ($dd, $mm, $yy) = m#^
									(\d\d?) [\./] (\d\d?) [\./] ( \d\d (?:\d\d)? )
d217 5
a221 4
				} elsif ( ($h, $m, $dd, $mm, $yy) = m#^
										(\d\d) :? (\d\d)
										\s+
										(\d\d?) [\./] (\d\d?) [\./] ( \d\d (?:\d\d)? )
d371 17
d1111 1
a1111 1
C<PRE_FILTER> is a callback that is called with B<%F> hash set to the values of the field names for this availability
d1244 1
a1244 1
Returns the argument formatted by weeks, days, hours, minutes and seconds eg &t2hms -> 5m.
@


1.56
log
@1 Incosequential Pod changes.
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.55 2005-12-14 13:55:26+11 sh1517 Exp sh1517 $
d14 1
d17 1
a17 1
@@EXPORT = qw(d2t t2hms comp max_l %st_et imep Iterator) ;
d91 2
d937 15
d1231 5
@


1.55
log
@1 Pod updates caused by the changes to the constructor (service report and pre_filter support).
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.54 2005-12-14 11:18:06+11 sh1517 Exp sh1517 $
d1030 2
a1031 2
Gets the Nagios (http://wwww.Nagios.ORG/) B<All Hosts> availability report (in CSV format) and applies grep like filters, 
map like munging, and slice like field masks to produce a report which can be output in
@


1.54
log
@1 Set 'initialassumedservicestate' to 6 for service report. Otherwise, if
  a service has not failed in the report period, the availability CGIs
  report the PERCENT_TOTAL_TIME_OK as 0.000%.
2 Correct the URLs in the report (the links failed to only show the
  outages in the current log because backtrack was not set properly).
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.53 2005-12-13 19:46:41+11 sh1517 Exp sh1517 $
d1045 1
a1045 1
=item * new (DATA_SOURCE, REPORT_PERIODS, TIME_PERIODS)
d1071 11
a1081 2
The constructor gets the Nagios availability data (in CSV format) for the specified time period(s) and store it in
the object.
d1120 2
a1121 2
C<DOWNS> is an optional scalar flag. If the flag is set, for each host selected by the SELECTOR_CALLBACK, the availability
report for B<that> host is fetched and the outage records extracted.
d1127 22
a1148 1
with a small number of report fields (eg HOST_NAME, PERCENT_TOTAL_UP_TIME).
d1209 4
d1224 2
@


1.53
log
@1 Changes to support service URLs. Still no service down report.
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.52 2005-12-13 13:35:55+11 sh1517 Exp sh1517 $
d24 2
a25 2
use constant CGI_PATH			=> '' ;
use constant LYNX			=> '/usr/local/bin/lynx' ;
d49 1
a49 1
q(show_log_entries=&host=FOO&service=all&t1=T1&t2=T2&rpttimeperiod=REPORT_PERIOD&assumeinitialstates=yes&assumestateretention=yes&assumestatesduringnotrunning=yes&includesoftstates=no&initialassumedservicestate=0&backtrack=0&csvoutput=) ;
d58 1
a58 1
q(http://SERVER/nagios/cgi-bin/avail.cgi?host=HOST&service=SVC&t1=T1&t2=T2&show_log_entries=&assumeinitialstates=yes&assumestateretention=yes&includesoftstates=no&assumestatesduringnotrunning=yes&initialassumedservicestate=0backtrack=0) ;
d411 1
a411 1
mkreport(  $these_fields, $select_these, $this_order, $alter )
d880 1
a880 1
      if /HOST UP/ ;
@


1.52
log
@1 Partial support for service report (no downs yet).
2 Correct mistaken duplicated add of new field names in mkreport(). In a
  case where the caller asks for two reports, the added fields will be
  pushed after those fields that were already added for the first rep,
  making the fieldnumbers useless for the output functions.
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.51 2005-12-13 11:34:26+11 sh1517 Exp sh1517 $
d18 1
a18 3
sub Iterator (&) { return $_[0] } 

$VERSION = '0.012_ITER';
d24 2
a25 2
use constant CGI_PATH			=> '/usr/lib/nagios/cgi/' ;
use constant LYNX			=> '/usr/bin/lynx' ;
d51 1
a51 1
use constant AVAIL_URL_TEMPLATE		=>
d54 8
a61 2
use constant TREND_URL_TEMPLATE		=>
q(http://SERVER/nagios/cgi-bin/trends.cgi?host=HOST&t1=T1&t2=T2&show_log_entries=&assumeinitialstates=yes&assumestateretention=yes&includesoftstates=no&backtrack=0) ;
d323 2
a324 1
      my $host = $vals[ $me->{FIELDS}{HOST_NAME} ] ;
d326 6
a331 1
      $vals[$me->{FIELDS}{HOST_NAME} ]  = $host ;
d333 1
a333 1
      my $avail_url = AVAIL_URL_TEMPLATE ;
d335 2
d339 1
a339 1
      $vals[ $me->{FIELDS}{AVAIL_URL} ] = $avail_url ;
d341 1
a341 1
      my $trend_url = TREND_URL_TEMPLATE ;
d343 2
d347 1
a347 1
      $vals[ $me->{FIELDS}{TREND_URL} ] = $trend_url ;
d350 1
a350 1
         @@F{ @@{$me->{FIELDNAMES}} } = @@vals ;
a929 32
  }

}

sub imap (&$) {
  my ($transform, $iter) = @@_ ;

  return Iterator {
    local $_ = $iter->() ;
    return undef
      unless defined $_ ;
    return $transform->($_) ;
  } ;

}

sub each_array {
  my @@arrays   = @@_ ;
  my $cur_elt  = 0 ;
  my $max_size = 0 ;
  local $_ ;
  for (@@arrays) {
    $max_size = @@$_ 
      if @@$_ > $max_size ;
  }

  return Iterator {
    $cur_elt = 0, return ()
      if $cur_elt >= $max_size ;
    my $i = $cur_elt++ ;

    return map $_->[$i], @@arrays ;
@


1.51
log
@Substantial changes in approach
  1 Replace loops by maps (remembering to pass parms between maps ..)
  2 Replace iterators by lists - there is no need to iterate over the down list.
  3 Provide two new options for constructor
    3.1 pre_filter: since the Nag all hosts avail report gets records for _all_ hosts,
        collecting down records for each host (that may be discarded by the filter stage)
        is slow and wasteful.
    3.2 report_type: prospective support for service report.
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.50 2005/12/01 08:38:19 sh1517 Exp sh1517 $
d47 1
a47 1
use constant QS_TEMP			=> 
d50 2
a51 2
# use constant QS_TEMP			=> 
# q(show_log_entries=&REPORT_TYPE=all&t1=T1&t2=T2&rpttimeperiod=REPORT_PERIOD&assumeinitialstates=yes&assumestateretention=yes&assumestatesduringnotrunning=yes&includesoftstates=no&initialassumedhoststate=3&initialassumedservicestate=6&backtrack=0&csvoutput) ;
d295 1
a295 1
    $user_data		= QS_TEMP ;
d460 1
a460 3
			$alter
				? @@new_field_names = $alter->($_, %F)
				: $_;
d468 1
a468 1
    if ( @@new_field_names ) {
@


1.50
log
@1 Interpret down times as either Euro or US dates depending on
  constant value EURO_DATE (set by Makefile.PL).
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.49 2005-12-01 14:23:58+11 sh1517 Exp sh1517 $
d13 1
d16 1
a16 2
@@EXPORT = qw(t2hms comp max_l %st_et) ;
@@EXPORT_OK = qw() ;
d18 3
a20 1
$VERSION = '0.012';
d26 2
a27 2
use constant CGI_PATH			=> '' ;
use constant LYNX			=> '/usr/local/bin/lynx' ;
a44 24
use constant NEW_USAGE			=> sub { 
							my $data_source = shift @@_ ;
							my $usage ;
							   $usage = $data_source =~ /^local_cgi/ 
								? <<LOCAL_CGI
new(\$class, '$data_source', [ \$report_period_ar ], \$time_period)
             ^local_cgi SERVER_NAME NAGIOS_USER

You must specify both the Nagios server name and the 'authenticated Nagios user' by following 'local_cgi'
with space separated values of the server name and the user name.
LOCAL_CGI

							   	: <<WEB_PAGE;
new(\$class, '$data_source', [ \$report_period_ar ], \$time_period)
             ^web_page NAGIOS_WEB_SERVER NAG_USER AUTH

You must specify the name of the web server, the authenticated user and the access credential by 
following 'web_page' with the space separated values.
WEB_PAGE

							die $usage ;

						} ;

d50 3
d250 1
a250 1
  my ($class, $source_tag, $rpt_period, $tme_period) = @@_ ;
d254 6
d288 1
d318 1
d321 2
a322 1
      $vals[$me->{FIELDS}{HOST_NAME} ] = $host ;
d328 1
d334 7
d421 3
a423 3
  $these_fields ||= [] ;
  $select_these	||= sub { 1 } ;
  $this_order   ||= sub { my %f = @@_ ; $a->[$f{HOST_NAME}] cmp $b->[$f{HOST_NAME}] } ;
d428 11
a438 1
  local $_ ; 
a440 3
    my @@rep = () ;
    foreach ( @@{ $me->{AVAIL_REPORTS}{$rep} } ) {
      my (@@vals, %F) ;
d442 1
a442 2
      @@vals = @@$_ ;
      @@F{ @@{ $me->{FIELDNAMES} } } = @@vals ;
d444 2
a445 2
      next 
        unless $select_these->(%F) ;
d447 2
a448 2
      push @@rep, [ @@vals ] ;
    }
d450 16
a465 28
    if ( $add_downs && $me->{SOURCE_TAG} =~ /^(?:web_page|local_cgi)/ ) {
							# Can only get outage records
							# by running the per host
							# availability report with 
							# web_page and local_cgi data
							# sources
        my @@r = @@rep ;
        @@rep  = () ;

	foreach my $r (@@r) {
	  my $it = &down_iter($me->{DATA_SOURCE}, $r->[$fields{AVAIL_URL}], $me->{T1}) ;

							# XXX
							# Want to suppress multiple 
							# copies of summary record
          my $o = $it->() ;
          $o = [ ' ', ' ', ' ' ]
            unless $o ;
          do {
            my   @@n =  @@$r ;
            push @@n,   @@$o ;
            push @@rep, [ @@n ] ;
          } while ( $o = $it->() ) ;
        }
							# XXX
							# Add the new fieldnames 
							# DOWN, UP, DURATION.
							# Recompute offsets etc
d467 2
a468 2
      my @@new_field_names = ( @@{$me->{FIELDNAMES}}, qw(DOWN UP OUTAGE) ) ;
      %fields             = map { $new_field_names[$_] => $_ } (0 .. $#new_field_names) ;
d470 4
a473 2
							# XXX 
							# Update object also
d476 7
d484 2
a485 51
    if ( $alter && ref($alter) eq 'CODE' ) {
      my @@new_field_names	= () ;
      my @@new_field_indices	= () ;
      my @@added_indices		= () ;
      my %new_fields		= %fields ;
							# XXX
							# sort callback __must__
							# refer to $a and $b in
							# __this__ package ...
      foreach (sort { $this_order->(%fields) } @@rep) {
        my (@@vals, %F) ;

        @@vals = @@$_ ;
        @@F{ @@{ $me->{FIELDNAMES} } } = @@vals ;
							# alter->($_, %F) updates the
							# array pointed to by $_ in place,
							# appending new fields to the array
							# & returning a list of the new
							# field names

        @@new_field_names	= $alter->($_, %F) ;
        @@new_field_indices	= ( 0 .. $#$_ ) 
					unless @@new_field_indices ;

	@@added_indices		= splice(	@@new_field_indices, 
						$#$_ - @@new_field_names + 1,
						@@new_field_names
					 )
					unless @@added_indices ;

        my $i = 0 ;
        foreach my $nf (@@new_field_names) {
          $new_fields{$nf} = $added_indices[$i++] ;
        }

        push @@{ $me->{REPORTS}{$rep}{RECORDS} },
		[ @@{$_}[@@new_fields{@@field_names}] ] ;

      }

      $me->{REPORTS}{$rep}{FIELDNAMES} =  [ @@field_names ] ;

    } else {
   
      $me->{REPORTS}{$rep}{RECORDS} = [
					map  [ @@{$_}[@@fields{@@field_names}] ],
					sort { $this_order->(%fields) } @@rep
				      ] ;

      $me->{REPORTS}{$rep}{FIELDNAMES} =  [ @@field_names ] ;
    }
d490 1
d835 1
a835 1
sub down_iter {
d860 1
a860 1
    @@down_recs   = split /\n/, $downs ;
a862 1
  @@downs = () ;
a866 4
							# XXX
							# The iterator is only the object interface to the
							# list.
							# Maybe better to use grep on the iterator.
d874 1
a874 1
			      /x ;
d884 3
a886 4
  return sub {
							# Iter while you work.
    shift @@downs 
  } ;
a891 1
  # my ($dd, $mm, $yyyy, $h, $m, $s) = $t1_local =~ / (\d+)-(\d+)-(\d+) \s+ (\d+):(\d+):(\d+) /x ;
a892 1
  # my $t1 = timelocal($s, $m, $h, $dd, $mm - 1, $yyyy) ;
d922 40
@


1.49
log
@1 Fix date match patterns in stime_etime __DEFAULT__ tag: allow
  one digit days and months.
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.48 2005-12-01 11:34:43+11 sh1517 Exp sh1517 $
d24 2
a25 2
use constant CGI_PATH			=> '/usr/lib/nagios/cgi/' ;
use constant LYNX			=> '/usr/bin/lynx' ;
d27 3
d958 1
a958 6
  if ( ( ($dd, $mm, $yyyy, $h, $m, $s) = / (\d+)-(\d+)-(\d+) \s+ (\d+):(\d+):(\d+) /x )
       && $dd >= 1
       && $dd <= 31
       && $mm >= 1
       && $mm <= 12
     ) {
d961 2
a962 1
    return timelocal($s, $m, $h, $dd, $mm - 1, $yyyy) ;
d1206 2
a1207 1
  Returns a ref to a function that orders the records by the maximum of the values of the TOTAL_TIME_DOWN and TOTAL_TIME_UNREACHABLE fields.  
@


1.48
log
@1 Correct pod bug (perldoc finds no doc) caused by block comment with =begin comment .. =cut
  near end of file.
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.47 2005-11-30 22:16:56+11 sh1517 Exp sh1517 $
d205 1
a205 1
									(\d\d) [\./] (\d\d) [\./] ( \d\d (?:\d\d)? )
d228 1
a228 1
										(\d\d) [\./] (\d\d) [\./] ( \d\d (?:\d\d)? )
a270 9
							# XXX
							# $tme_period =~ /
							# 			this(?:day|week|month|year)		|
							#			last(?:7days|24hours|week|month|year)	|
							#			last\d+hours				|
							#			last\d+days				|
							#			today					|
							#			yesterday				|
							#                /x
@


1.47
log
@1 Replace patterns for the 'at' times under the __DEFAULT__ handler in the
  %st_et despatch table. (When matching alternatives, must use 'union'
  patterns when capturing results since otherwise the alternatives
  _each_ have a captured result - usually undef - so it is impossible
  to capture the whats wanted. NB HH:MM | HHMM == HH :? MM
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.46 2005-11-29 22:01:02+11 sh1517 Exp sh1517 $
d24 2
a25 2
use constant CGI_PATH			=> '' ;
use constant LYNX			=> '/usr/local/bin/lynx' ;
a973 18
=begin comment

# Cannot distinguish a Euro style data and a US date only on the date pattern
# eg 01-02-2005 is 1st Feb 2005 Euro
#    01-02-2005 is 2nd Jan 2005 US
  } elsif ( ($mm, $dd, $yyyy, $h, $m, $s) = / (\d+)-(\d+)-(\d+) \s+ (\d+):(\d+):(\d+) /x
             && $dd >= 1
             && $dd <= 31
             && $mm >= 1
             && $mm <= 12
           ) {
							# 11-01-2005 00:00:00
							# MM-DD-YYYY HH:MM:SS Euro style dates with day first
    return timelocal($s, $m, $h, $dd, $mm - 1, $yyyy) ;
=end comment

=cut

d1108 5
a1112 3
C<TIME_PERIOD> is an optional specification of the interval containing eligible availability records. It is either a single scalar
value of one of the Nagios interval names such as C<thisday>, C<thismonth>, or a reference to a list of two elements specifying the
interval from which availability data will be selected. The list specification is B<not> implemented. If this argument is 
@


1.46
log
@1 Add a whole lot of new time conversion cases in the __DEFAULT__ tag
  of the %stime_etime despatch table to handle timeperiods consisting
  of a string matching some of the time formats used by the 'at'
  command. Eg 20:00 29.11.2005 means the timeperiod from that
  time until now.
  NB - untested.
     - prob needs the am|pm patterns also
     - prob needs to allow use of other tags also eg 8 pm yesterday.
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.45 2005-11-28 16:07:06+11 sh1517 Exp sh1517 $
d177 1
d195 2
a196 1
				} elsif ( ($h, $m) = /^ (?: (\d\d) (\d\d) ) | (?: (\d\d) : (\d\d) ) $/x ) {
d205 5
a209 4
									(?: (\d\d) \. (\d\d) \. (\d{2-4}) ) |
									(?: (\d\d) /  (\d\d) /  (\d{2-4}) )
								 $
								#x ) {
d217 1
a217 1
				     $t[MONTH] = $mm - 1 ;
d226 1
a226 1
										(?: (\d\d) (\d\d) ) | (?: (\d\d) : (\d\d) )
d228 4
a231 4
										(?: (\d\d) \. (\d\d) \. (\d{2-4}) ) |
										(?: (\d\d) /  (\d\d) /  (\d{2-4}) )
								 	 $
									#x ) {
d239 1
a239 1
				     $t[MONTH] = $mm - 1 ;
a278 1
							#			(?:<sdate> <edate>)
@


1.45
log
@1 Add filter to down_iter to reject down records with outage
  start times before the time_period argument to the constructor.
  (otherwise, get all the down records for a selected host).
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.44 2005-11-28 10:28:52+11 sh1517 Exp sh1517 $
d87 15
d173 8
a180 2
				my ($tag, $t) = @@_ ;
				if ( my ($days)       = $tag =~ /^last(\d+)day/ ) {
d182 2
a183 1
				} elsif ( my ($hours) = $tag =~ /^last(\d+)hour/ ) {
d185 58
d244 1
a244 1
				  die "\%stime_etime: non existent tag '$tag' - no handler defined for this tag. Outahere."
d948 4
a951 3
  my ($t1_local, $t2) = @@_ ;
  my ($dd, $mm, $yyyy, $h, $m, $s) = $t1_local =~ / (\d+)-(\d+)-(\d+) \s+ (\d+):(\d+):(\d+) /x ;
  my $t1 = timelocal($s, $m, $h, $dd, $mm - 1, $yyyy) ;
d954 46
@


1.44
log
@1 Add two new time periods: lastnhours and lastndays.
2 Correct some POD/usage mistakes: timeperiod is a scalar, the name of the time
  -period from which availability data will be extracted.
NB there may be a timeperiod related bug in mkreport() since
   reporting on those hosts with < 100% PERCENT_TOTAL_TIME_UP for
   a timeperiod of last12hours shows hosts with downs a week old.
@
text
@d5 1
a5 1
# $Id: Report.pm,v 1.43 2005-11-25 09:14:16+11 sh1517 Exp sh1517 $
d205 2
a206 2
  $me->{REPORT_PERIODS} = [ @@report_period ] ;
  my ($t1, $t2) 	= exists $stime_etime{$time_period}	? $stime_etime{$time_period}->($time_period, [ localtime ])
d210 1
a210 1
  ($source_tag, $data) = $source_tag eq 'dev_debug'	? ('dev_debug', 'BOGON SERVER BOGON_USER BOGON_PW')
d217 1
a217 4
  my ($server, $auth)     = split /\s+/, $data, 2 ;

							# XXX
							# Learn how to use caller.
d222 5
a226 3
  $me->{DATA_SOURCE}      = $data_source{$source_tag}->(split /\s+/, $auth) ;
  $me->{SERVER}           = $server ;
  $me->{SOURCE_TAG}       = $source_tag ;
d231 4
a234 4
    $user_data = QS_TEMP ;
    $user_data =~ s/t1=T1&t2=T2/t1=$t1&t2=$t2/ ;
    $user_data =~ s/REPORT_PERIOD/$rep_period/ ;
    $user_data =
d240 1
a240 1
    my @@avail_rep = $me->{DATA_SOURCE}->($user_data) ;
d380 1
a380 1
	  my $it = &down_iter($me->{DATA_SOURCE}, $r->[$fields{AVAIL_URL}]) ;
d807 1
a807 1
  my ($data_source, $avail_url) = @@_ ;
d838 5
d852 3
d864 9
@


1.43
log
@1 Restore RCS Id tag.
@
text
@d5 1
a5 1
# $Id$
d24 2
a25 2
use constant CGI_PATH			=> '/usr/lib/nagios/cgi/' ;
use constant LYNX			=> '/usr/bin/lynx' ;
d45 1
a45 1
new(\$class, '$data_source', [ \$report_period_ar ], [ \$time_period ])
d53 1
a53 1
new(\$class, '$data_source', [ \$report_period_ar ], [ \$time_period ])
d105 1
a105 1
				( $midnight- 86_400,
d109 14
d157 10
a168 2
# *st_et = \%stime_etime ;

d186 1
a186 1
  my $time_period   = $tme_period  ? $tme_period   : qw(thismonth) ;
d192 2
d206 2
a207 1
  my ($t1, $t2) 	= $stime_etime{$time_period}->($time_period, [ localtime ]) ;
d981 1
a981 1
C<TIME_PERIODS> is an optional specification of the interval containing eligible availability records. It is either a single scalar
@


1.42
log
@1 Correct constructor bug: reportperiod was only being set
  for the first report period in a list.
@
text
@d5 2
@


1.41
log
@0.012.
A pre-release cut.
@
text
@a201 3
  my $user_data = QS_TEMP ;
     $user_data =~ s/t1=T1&t2=T2/t1=$t1&t2=$t2/ ;

d204 3
@


1.40
log
@1 Add some checks of the data supplied with the source_tag to the constructor.
2 Bail if closure generators called without authorisation data.
@
text
@a2 165
# $Id: Report.pm,v 1.39 2005-11-24 12:36:16+11 sh1517 Exp sh1517 $

# $Log: Report.pm,v $
# Revision 1.39  2005-11-24 12:36:16+11  sh1517
# 1 Remove more test data from __DATA__ section (some of the data labelled '24x7').
#   Note that this data is used by some of the tests (mkreport()) and the
#   tests depend on values in this data.
#
# Revision 1.38  2005-11-24 12:32:13+11  sh1517
# Remove some test data from __DATA__ section (that labelled 'DEST_Optus_SLA_hours').
#
# Revision 1.37  2005/11/23 11:09:55  sh1517
# 1 Substantial reorg of constructor to accomodate more data sources.
#   Parameter validation and consistency checking still TODO.
#
# Revision 1.36  2005-11-23 11:28:42+11  sh1517
# 1 Minor changes
#   1.1 POD
#   1.2 Checks on presence of CGIs and web page fetch programs
#   1.3 remove any leading '0d ' etc from the outage values got by the down_iter closure.
#   1.4 Commentary/old code deletion.
#
# Revision 1.35  2005-11-22 14:39:13+11  sh1517
# 0.011
# Substantial changes to prepare for publication.
# 1 Constructor now requires server and credential data for all
#   data sources except debug.
# 2 Constructor will fetch the availability report from the
#   named web server with the 'web_page' data source.
# 3 Where possible, a closure encapsulating the server/credential
#   information is generated. This allows the class to get
#   stuff with $me->{DATA_SOURCE}->($url).
# 4 A new flag, 'add_downs' has been added to mkreport().
#   If set, the down details are duplicated for each
#   HOST_DOWN in the list of downs. The details of the
#   outage (or down) are also made available in the fields
#   DOWN, UP, OUTAGE. These are most useful if only a small
#   fields are displayed (eg HOST_NAME, DOWN, UP, OUTAGE).
#
# Revision 1.34  2005-11-12 20:44:57+11  sh1517
# 1 Add lastweek and thisweek to interval filters.
#
# Revision 1.33  2005-11-12 20:15:21+11  sh1517
# 1 Improve the interval calculating callbacks in the %stime_etime despatch table.
# 2 Remove obsolete first_last_month (replaced by thismonth or lastmonth callbacks).
# 3 Export %st_et the interval despatch table.
# 4 POD revisions.
#
# Revision 1.32  2005-11-11 19:42:47+11  sh1517
# pre 0.010
# 1 Pass a filter option to constructor to only report on availability only during a specific
#   timeperiod (using the same names as Nagios: lastweek, lastmonth, lastyear).
#   Only some of the timeperiods implemented (hacks at that) and not tested.
#
# Revision 1.31  2005/11/07 23:42:16  sh1517
# 0.009
# 1 Export comp(), a function that returns the comparator function for ordering the records.
# 2 Initialise the column widths to 1.5 times the fieldname lengths in excel_dump(). This is
#   done because when the field names are bolded (col headers), they are wider than length
#   of the fieldnames.
#
# Revision 1.30  2005-11-03 20:52:33+11  sh1517
# 0.008
# 1 excel_dump() changes to set column widths correctly (call set_column() before calling ->write()).
#
# Revision 1.29  2005-11-02 18:57:59+11  sh1517
# 1 Changes to excel_dump() to try and
#   1.1 Bold column headers
#   1.2 Set column width proportional to col header length.
#
# Revision 1.28  2005-11-02 10:33:00+11  sh1517
# 1 Change label of URL (to hostname from 'hostname availability records').
#
# Revision 1.27  2005-11-01 21:39:36+11  sh1517
# 0.007
# 1 Add usage checks to mkreport().
# 2 Add test of mkreport() - hack away, hack away.
#
# Revision 1.26  2005-11-01 18:48:38+11  sh1517
# 0.007
# 1 Remove commented out code.
#
# Revision 1.25  2005-11-01 18:42:13+11  sh1517
# 1 Use write_url() in excel_dump for URL output (so that the
#   label is not a very long URL in the worksheet).
#
# Revision 1.24  2005-11-01 18:23:51+11  sh1517
# 1 Change avail and trends URLs to use 'custom time period' nvps (ie t1=&t2=& instead of
#   timeperiod=thismonth) so that the URLs still function - from the spreadsheets links
#   get the report month and _not_ the current month.
#
# Revision 1.23  2005-11-01 13:00:45+11  sh1517
# 0.006
# 1 Minor POD changes.
#
# Revision 1.22  2005-11-01 12:50:11+11  sh1517
# 1 Allow fields added by alter() (ie mkreport()) to be reordered.
#
# Revision 1.21  2005-11-01 10:58:03+11  sh1517
# 1 Export an alias of time2ddhhmss (for use by mkreport() callbacks).
# 2 Fix bug in from_data_handle(): now only reads the entries corresp
#   to the specified time period.
# 3 Realise that the alter() callback processing in mkreport() is broken
#   in that it makes it hard to reorder the complete set of fields after
#   alter() callback has added some. This segment needs to retain
#   the amended %field map so the slice can get the offsets of all
#   the fields (including those added by for example t2hms($F{TOTAL_TIME_UP}).
#
# Revision 1.20  2005-10-31 08:36:10+11  sh1517
# 1 Correct minor typo/warning in constructor.
#
# Revision 1.19  2005-10-31 08:32:36+11  sh1517
# 1 excel_dump()
#   1.1 die only if require 'Spreadsheet..' raises an exception.
#   1.2 if called without an arg, use EXCEL_FILENAME as the spreadsheet filename.
#
# Revision 1.18  2005-10-30 18:12:26+11  sh1517
# 0.005
# 1 More efficient time2ddhhmmss().
#
# Revision 1.17  2005-10-29 23:42:53+10  sh1517
# 1 unset $- in debug_dump() to force a top of page (and so write the top of form header).
# 2 tiny POD changes.
#
# Revision 1.16  2005-10-29 22:20:11+10  sh1517
# 1 Change name of arg to debug_dump from fields_per_page to 'fields_per_line'
# 2 Add some BUGS to POD.
#
# Revision 1.15  2005-10-29 22:10:23+10  sh1517
# 1 Trap Spreadsheet::WriteExcel load failures (prob ought to have Makefile whine also).
#
# Revision 1.14  2005-10-29 21:54:51+10  sh1517
# 1 Add 'field_width' 'fields_per_page' args to debug_dump().
#
# Revision 1.13  2005-10-29 21:15:25+10  sh1517
# 1 Add some POD.
#
# Revision 1.12  2005-10-29 15:53:45+10  sh1517
# 0.004
# 1 Remove obsolete trans() method.
# 2 Note that alter is called with both the pointer to the report record and the
#   hash %F set to the slot names and values (so the callback can access the slots).
#
# Revision 1.11  2005-10-29 15:30:11+10  sh1517
# 1 First cut at calling alter() from mkreport(). Seems Ok.
#
# Revision 1.10  2005-10-29 12:41:23+10  sh1517
# 1 Add a _terrible_ trans() method. trans() should go and
# be replaced by a call to the alter() callback in mkreport().
#
# Revision 1.9  2005-10-29 10:39:27+10  sh1517
# 1 Changes to dump methods to dump reports in order specified by constructor
#   (instead of the keys of the REPORTS hash).
# 2 Try and do top of form processing debug_dump().
#
# Revision 1.8  2005-10-28 22:04:05+10  sh1517
# 1 Implement dev_debug (by copying Larry Wall's format generation
#   code from dotime).
#
# Revision 1.7  2005-10-27 23:22:06+10  xwin
# 0.003
# 1 POD (minimal)
# 2 Perhaps testable.
#

d16 1
a16 1
$VERSION = '0.011';
d20 12
a31 1
							# Will be hacked by config process
a32 1
use constant CGI_PATH			=>       '/usr/lib/nagios/cgi/' ;
a33 2
use constant LYNX			=>       '/usr/bin/lynx' ;
use constant WGET			=>       '' ;
d149 4
a152 2
  web_page	=> \&gen_web_page,
  local_cgi	=> \&gen_local_cgi,
d186 2
a187 1
  die "new() called with either null source_tag or null parms. Got \$source_tag: '$source_tag' \$data: '$data'."
d195 1
a195 1
  die "new() called with a source_tag that failed to contain a non null server name."
d440 1
a440 1
  die "John McNamara's _excellent_ CPAN module, Spreadsheet::WriteExcel is needed by excel_dump(). Outahere."
d742 2
a743 1
  die "gen_local_cgi() called without username for access to local availability CGI. \$user: '$user'."
a766 2
							# XXX
							# Use caller().
d768 2
a769 1
  die "gen_web_page() called without username and password for web page access. \$user: '$user', \$pass: '$pass'."
@


1.39
log
@1 Remove more test data from __DATA__ section (some of the data labelled '24x7').
  Note that this data is used by some of the tests (mkreport()) and the
  tests depend on values in this data.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.38 2005-11-24 12:32:13+11 sh1517 Exp sh1517 $
d6 5
d187 1
a187 1
use constant CGI_PATH			=>     '' ;
d189 2
a190 2
use constant LYNX			=>     '/usr/local/bin/lynx' ;
use constant WGET			=>     '' ;
d316 1
a316 1
  my @@report_period = $rpt_period  ? @@$rpt_period  : qw(DEST_Optus_SLA_hours 24x7) ;
d341 5
d347 1
a347 3
							# Validate parms
							# NEW_USAGE->($source_tag)
				  			# unless $server && $user ;
d349 2
a350 4
  die "Can't use 'local_cgi' when the Nagios availability CGI was not found (by Makefile.PL). Try 'web_page'."
    if $source_tag eq 'local_cgi' and not LOCAL_CGI ;

  my ($server, $auth)     = split /\s+/, $data, 2 ;
d892 1
d896 4
a899 1
  $ENV{REMOTE_USER}    = shift @@_ ;
d920 5
@


1.38
log
@Remove some test data from __DATA__ section (that labelled 'DEST_Optus_SLA_hours').
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.37 2005/11/23 11:09:55 sh1517 Exp sh1517 $
d6 3
a1252 4
"BENSW201", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"BENSW202", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"BENSW203", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"BNESW400", 0, 0.000%, 0.000%, 2044935, 99.991%, 99.991%, 2044935, 99.991%, 99.991%, 0, 0.000%, 0.000%, 192, 0.009%, 0.009%, 192, 0.009%, 0.009%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
a1260 2
"CWASW201", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"CWASW202", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
a1277 22
"MELSW300", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW200", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW201", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW202", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW203", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW204", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW205", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW206", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW207", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW208", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW209", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW210", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW200", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW201", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW202", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW203", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW204", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW205", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW206", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW207", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW208", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW210", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
a1283 10
"Minister_Farmer_Campbelltown_Optus_router_PE_interface_frame", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Farmer_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Hardgrave_DEST_router_HSRP_A", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Hardgrave_DEST_router_HSRP_B", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Hardgrave_Moorooka_Optus_router_PE_interface_adsl", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Hardgrave_Moorooka_Optus_router_PE_interface_frame", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Nelson_DEST_router_HSRP_A", 0, 0.000%, 0.000%, 2043936, 99.942%, 99.942%, 2043936, 99.942%, 99.942%, 0, 0.000%, 0.000%, 1191, 0.058%, 0.058%, 1191, 0.058%, 0.058%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Nelson_DEST_router_HSRP_B", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Nelson_Lindfield_Optus_router_PE_interface_ethernet", 0, 0.000%, 0.000%, 2044937, 99.991%, 99.991%, 2044937, 99.991%, 99.991%, 0, 0.000%, 0.000%, 190, 0.009%, 0.009%, 190, 0.009%, 0.009%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Nelson_Lindfield_Optus_router_PE_interface_frame", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
a1294 16
"PARSW201", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"PARSW202", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"PARSW203", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"PARSW210", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"PERSW600", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Perth_State_Office_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Perth_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"SYDSW200", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Sydney_State_Office_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Sydney_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TODSW210", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW202", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW203", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW204", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW205", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW210", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
@


1.37
log
@1 Substantial reorg of constructor to accomodate more data sources.
  Parameter validation and consistency checking still TODO.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.36 2005-11-23 11:28:42+11 sh1517 Exp sh1517 $
d6 4
a1363 125
# DEST_Optus_SLA_hours
HOST_NAME, TIME_UP_SCHEDULED, PERCENT_TIME_UP_SCHEDULED, PERCENT_KNOWN_TIME_UP_SCHEDULED, TIME_UP_UNSCHEDULED, PERCENT_TIME_UP_UNSCHEDULED, PERCENT_KNOWN_TIME_UP_UNSCHEDULED, TOTAL_TIME_UP, PERCENT_TOTAL_TIME_UP, PERCENT_KNOWN_TIME_UP, TIME_DOWN_SCHEDULED, PERCENT_TIME_DOWN_SCHEDULED, PERCENT_KNOWN_TIME_DOWN_SCHEDULED, TIME_DOWN_UNSCHEDULED, PERCENT_TIME_DOWN_UNSCHEDULED, PERCENT_KNOWN_TIME_DOWN_UNSCHEDULED, TOTAL_TIME_DOWN, PERCENT_TOTAL_TIME_DOWN, PERCENT_KNOWN_TIME_DOWN, TIME_UNREACHABLE_SCHEDULED, PERCENT_TIME_UNREACHABLE_SCHEDULED, PERCENT_KNOWN_TIME_UNREACHABLE_SCHEDULED, TIME_UNREACHABLE_UNSCHEDULED, PERCENT_TIME_UNREACHABLE_UNSCHEDULED, PERCENT_KNOWN_TIME_UNREACHABLE_UNSCHEDULED, TOTAL_TIME_UNREACHABLE, PERCENT_TOTAL_TIME_UNREACHABLE, PERCENT_KNOWN_TIME_UNREACHABLE, TIME_UNDETERMINED_NOT_RUNNING, PERCENT_TIME_UNDETERMINED_NOT_RUNNING, TIME_UNDETERMINED_NO_DATA, PERCENT_TIME_UNDETERMINED_NO_DATA, TOTAL_TIME_UNDETERMINED, PERCENT_TOTAL_TIME_UNDETERMINED
"16_Mort_St_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Adelaide_State_Office_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Adelaide_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Albany_DEST_router", 0, 0.000%, 0.000%, 745449, 97.630%, 97.630%, 745449, 97.630%, 97.630%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 18096, 2.370%, 2.370%, 18096, 2.370%, 2.370%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Albany_Optus_router_PE_interface", 0, 0.000%, 0.000%, 745449, 97.630%, 97.630%, 745449, 97.630%, 97.630%, 0, 0.000%, 0.000%, 18096, 2.370%, 2.370%, 18096, 2.370%, 2.370%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Albury_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Albury_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Armidale_DEST_router", 0, 0.000%, 0.000%, 730505, 95.673%, 95.673%, 730505, 95.673%, 95.673%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 33040, 4.327%, 4.327%, 33040, 4.327%, 4.327%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Armidale_Optus_router_PE_interface", 0, 0.000%, 0.000%, 730375, 95.656%, 95.656%, 730375, 95.656%, 95.656%, 0, 0.000%, 0.000%, 33170, 4.344%, 4.344%, 33170, 4.344%, 4.344%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"BENSW201", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"BENSW202", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"BENSW203", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"BNESW400", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Bendigo_DEST_router", 0, 0.000%, 0.000%, 393625, 51.552%, 51.552%, 393625, 51.552%, 51.552%, 0, 0.000%, 0.000%, 369920, 48.448%, 48.448%, 369920, 48.448%, 48.448%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Bendigo_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Brisbane_State_Office_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Brisbane_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Broken_Hill_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Broken_Hill_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Bunbury_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Bunbury_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"CWASW201", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"CWASW202", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"CyberTrust_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"DARSW000", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"DUBSW200", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Darwin_State_Office_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Darwin_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Dubbo_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Dubbo_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Griffith_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Griffith_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Gympie_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Gympie_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Hobart_State_Office_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Hobart_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Kempsey_DEST_router", 0, 0.000%, 0.000%, 604800, 79.209%, 79.209%, 604800, 79.209%, 79.209%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 158745, 20.791%, 20.791%, 158745, 20.791%, 20.791%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Kempsey_Optus_router_PE_interface", 0, 0.000%, 0.000%, 604800, 79.209%, 79.209%, 604800, 79.209%, 79.209%, 0, 0.000%, 0.000%, 158745, 20.791%, 20.791%, 158745, 20.791%, 20.791%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Lismore_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Lismore_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MELSW300", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW200", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW201", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW202", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW203", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW204", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW205", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW206", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW207", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW208", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW209", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW210", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW200", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW201", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW202", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW203", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW204", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW205", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW206", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW207", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW208", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW210", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Mackay_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Mackay_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Melbourne_State_Office_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Melbourne_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Mildura_DEST_router", 0, 0.000%, 0.000%, 763214, 99.957%, 99.957%, 763214, 99.957%, 99.957%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 331, 0.043%, 0.043%, 331, 0.043%, 0.043%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Mildura_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763213, 99.957%, 99.957%, 763213, 99.957%, 99.957%, 0, 0.000%, 0.000%, 332, 0.043%, 0.043%, 332, 0.043%, 0.043%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Farmer_Campbelltown_Optus_router_PE_interface_frame", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Farmer_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Hardgrave_DEST_router_HSRP_A", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Hardgrave_DEST_router_HSRP_B", 0, 0.000%, 0.000%, 763524, 99.997%, 99.997%, 763524, 99.997%, 99.997%, 0, 0.000%, 0.000%, 21, 0.003%, 0.003%, 21, 0.003%, 0.003%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Hardgrave_Moorooka_Optus_router_PE_interface_adsl", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Hardgrave_Moorooka_Optus_router_PE_interface_frame", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Nelson_DEST_router_HSRP_A", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Nelson_DEST_router_HSRP_B", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Nelson_Lindfield_Optus_router_PE_interface_ethernet", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Nelson_Lindfield_Optus_router_PE_interface_frame", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Moree_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Moree_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Morwell_DEST_router", 0, 0.000%, 0.000%, 762970, 99.925%, 99.925%, 762970, 99.925%, 99.925%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 575, 0.075%, 0.075%, 575, 0.075%, 0.075%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Morwell_Optus_router_PE_interface", 0, 0.000%, 0.000%, 762449, 99.856%, 99.856%, 762449, 99.856%, 99.856%, 0, 0.000%, 0.000%, 1096, 0.144%, 0.144%, 1096, 0.144%, 0.144%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Newcastle_DEST_router", 0, 0.000%, 0.000%, 762154, 99.818%, 99.818%, 762154, 99.818%, 99.818%, 0, 0.000%, 0.000%, 1391, 0.182%, 0.182%, 1391, 0.182%, 0.182%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Newcastle_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Nowra_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Nowra_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"ORASW200", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Orange_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Orange_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"PARSW201", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"PARSW202", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"PARSW203", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"PARSW210", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"PERSW600", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Perth_State_Office_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Perth_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"SYDSW200", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Sydney_State_Office_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Sydney_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TODSW210", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW202", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW203", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW204", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW205", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW210", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Taree_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Taree_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Thursday_Island_DEST_router", 0, 0.000%, 0.000%, 760117, 99.551%, 99.551%, 760117, 99.551%, 99.551%, 0, 0.000%, 0.000%, 3428, 0.449%, 0.449%, 3428, 0.449%, 0.449%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Thursday_Island_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Toowoomba_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Toowoomba_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Walgett_DEST_router", 0, 0.000%, 0.000%, 761801, 99.772%, 99.772%, 761801, 99.772%, 99.772%, 0, 0.000%, 0.000%, 1744, 0.228%, 0.228%, 1744, 0.228%, 0.228%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Walgett_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Wollongong_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Wollongong_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Wyong_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Wyong_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"acisp050", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"acisp051", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"acisp052", 0, 0.000%, 0.000%, 763285, 99.966%, 99.966%, 763285, 99.966%, 99.966%, 0, 0.000%, 0.000%, 260, 0.034%, 0.034%, 260, 0.034%, 0.034%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"igf_dns_vip", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"nms_segment_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
END_OF_FILE_MARKER
@


1.36
log
@1 Minor changes
  1.1 POD
  1.2 Checks on presence of CGIs and web page fetch programs
  1.3 remove any leading '0d ' etc from the outage values got by the down_iter closure.
  1.4 Commentary/old code deletion.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.35 2005-11-22 14:39:13+11 sh1517 Exp sh1517 $
d6 7
d175 1
a175 1
use constant CGI_PATH			=> '/usr/lib/nagios/cgi/' ;
d177 2
a178 2
use constant LYNX			=> '/usr/bin/lynx' ;
use constant WGET			=> '/usr/bin/wget' ;
d290 10
a314 1

a320 2
  local $_ ;

d325 21
d348 6
a353 57
    my $user_data = QS_TEMP ;
       $user_data = $source_tag =~ /^local_cgi/ 
							# Server & credential data follows source tag
							# eg 'local_cgi nms sh1517' ;
							# Server is necessary to fill in URL templates.
			? do {
				die "Can't use 'local_cgi' when the Nagios availability CGI was not found (by Makefile.PL). Try 'web_page'."
                                  unless LOCAL_CGI ;

				my ($server, $user) ;
				($source_tag, $server, $user) = split /\s+/, $source_tag ;
				NEW_USAGE->($source_tag)
				  unless $server && $user ;

				$me->{DATA_SOURCE} = &gen_local_cgi($user) ;
				$me->{SERVER}      = $server ;
				$me->{SOURCE_TAG}  = $source_tag ;

				$user_data  =~ s/REPORT_PERIOD/$rep_period/;
				$user_data =~ s/t1=T1&t2=T2/t1=$t1&t2=$t2/ ;
				$user_data
			  }
			: 
		   $source_tag =~ /^web_page/
			? do {
				die "Can't use 'web_page' when no program like lynx was found (by Makefile.PL). Try 'local_cgi'."
                                  unless WEB_PAGE ;

				my ($server, $user, $pw) ;
				   ($source_tag, $server, $user, $pw) = split /\s+/, $source_tag ;
				NEW_USAGE->($source_tag)
				  unless $server && $user && $pw ;

							# Construct a closure so that 
							# other pages can be got without credentials.

				$me->{DATA_SOURCE} = &gen_get_web_page($user, $pw) ;
				$me->{SERVER}      = $server ;
				$me->{SOURCE_TAG}  = $source_tag ;

				$user_data =~ s/REPORT_PERIOD/$rep_period/;
				$user_data =~ s/t1=T1&t2=T2/t1=$t1&t2=$t2/ ;
				$user_data = "http://$server/nagios/cgi-bin/avail.cgi?$user_data" ;
				$user_data ;
			  }
			: 
		   $source_tag =~ /^dev_debug/
			? do {
				$me->{DATA_SOURCE} = \&from_data_handle ;
				$me->{SERVER}      = 'nagios' ;
							# Make a server name up in this case,
							# since the trend and availability URLs do
							# not exist.
				$me->{SOURCE_TAG}  = $source_tag ;
				$rep_period ;
			}
			: $rep_period ;
d364 3
d901 1
a901 1
sub gen_get_web_page {
@


1.35
log
@0.011
Substantial changes to prepare for publication.
1 Constructor now requires server and credential data for all
  data sources except debug.
2 Constructor will fetch the availability report from the
  named web server with the 'web_page' data source.
3 Where possible, a closure encapsulating the server/credential
  information is generated. This allows the class to get
  stuff with $me->{DATA_SOURCE}->($url).
4 A new flag, 'add_downs' has been added to mkreport().
  If set, the down details are duplicated for each
  HOST_DOWN in the list of downs. The details of the
  outage (or down) are also made available in the fields
  DOWN, UP, OUTAGE. These are most useful if only a small
  fields are displayed (eg HOST_NAME, DOWN, UP, OUTAGE).
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.34 2005-11-12 20:44:57+11 sh1517 Exp sh1517 $
d6 17
a153 1
# use vars qw($VERSION @@EXPORT @@EXPORT_OK);
a163 3
use constant DEV_DEBUG			=> 0 ;

# use constant REMOTE_USER		=> 'sh1517' ;
a164 3
use constant NAG_AVAIL_CGI		=> '/usr/lib/nagios/cgi/avail.cgi' ;

=begin comment
d166 1
d168 2
d172 3
a174 17
use constant GET_WEB_PAGE		=> LYNX ;

use constant LOCAL_CGI			=> sub {
							my $qs_user		= shift @@_ ;
							my ($qs, $user)		= split /::::/, $qs_user ;

							$ENV{QUERY_STRING}	= $qs ;
							$ENV{REMOTE_USER}	= $user ;
							$ENV{REQUEST_METHOD}	= REQUEST_METHOD ;

							return `${\NAG_AVAIL_CGI}` ;
						} ;

=end comment

=cut

a228 7
my %data_source = (
	# local_cgi	=> LOCAL_CGI,
	web_page	=> \&get_web_page,
	dev_debug	=> \&from_data_handle,
	DEFAULT		=> sub { die "Data source should be 'local_cgi' or 'web_page' or 'dev_debug'. Bad user.\n" },
) ;

d290 1
a290 1
							# XXXX
a315 1
							# if source is 'local_cgi'
d319 3
d326 1
d329 1
a331 5

							# XXXX
							# Works for timeperiods listed above (thisweek etc).
							# does _not_ for thisyear, lastyear etc.

d338 3
d350 2
a351 27
				$me->{SERVER} = $server ;

=begin comment
					  GET_WEB_PAGE =~ /lynx/ ?
					    sub { my @@x =
						     `${\GET_WEB_PAGE} -nolist -dump -width=1000 -auth=$user:$pw '$_[0]'`;
						     unshift @@x, (1..6) ;
						     @@x ;
						}                :
					  GET_WEB_PAGE =~ /wget/ ?
							# XXXX
							# Not a great idea since wget returns HTML and I don't
							# want to have to parse it.

					    sub { `${\GET_WEB_PAGE} -O - --http-user=$user --http-passwd=$pw $_[0]` }
								 :
					    sub { my $x =
						     `${\GET_WEB_PAGE} -nolist -dump -width=1000 -auth=$user:$pw '$_[0]'`;
						     $x = "\n" x 6 . $x ;
						     $x ;
						} ;
					
				use strict 'refs' ;

=end comment

=cut
d363 4
a366 1
							# Simply make a server name up in this case.
a372 5
    # my @@avail_cgi ;
    #    chomp( @@avail_cgi = $data_source{$source_tag}->($user_data) ) ;
							# Reject HTTP headers 
    # my @@avail_rep = splice(@@avail_cgi, 6) ;

d445 1
a445 1
							# XXXX
d457 1
a457 1
$alter        := optional callback that munges fields (perhaps transforming to new fields)
d498 6
a503 1
    if ( $add_downs ) {
a507 5
							# XXX
							# Can only get down records for
							# web_page and local_cgi data
							# sources

d510 1
a510 1
							# XXXX
a520 1

a531 1

d540 1
a540 1
							# XXXX
d615 1
a615 1
							# XXXX
d629 1
a629 1
							# XXXX
a872 1
					# package Nagios::Report ;
a881 1
					# package Nagios::Report ;
a902 1
    # my ($qs)           = $url =~ /^http:/ ? $url = /\?(.*)$/ : ($url) ;
d918 1
a918 1
							# Lynx will render the page as text
d920 2
a921 1
    `lynx -nolist -dump -width=1000 -auth=$user:$pass '$_[0]'` ;
a929 21
=begin comment

  Lynx formats the list of downs something like

  01-11-2005 00:00:00 09-11-2005 15:09:59 8d 15h 9m 59s  HOST UP (HARD)   PING OK - Packet loss = 0%, RTA = 68.34 ms

  The CGIs return HTML looks like

  <tr class='logEntriesEven'>
  <td class='logEntriesEven'>01-11-2005 00:00:00</td>
  <td class='logEntriesEven'>09-11-2005 15:09:59</td>
  <td class='logEntriesEven'>8d 15h 9m 59s</td>
  <td class='logEntriesUP'>HOST UP (HARD)</td>
  <td class='logEntriesEven'>PING OK - Packet loss = 50%, RTA = 1140.84 ms</td></tr>

  The CGIs _only_ produce CSV output on an all hosts report; a single host avail report is in HTML.

=end comment

=cut

d933 9
d943 2
a944 3
    my @@rows = $downs =~ m|(<tr.*?/tr>)|g ;
    @@down_recs   = map { s/<.*?>/ /g; $_ } @@rows ;

d946 5
a950 2
   ($downs) = $avail_rep =~ m|( \d+-\d+-\d+ \s+ \d+:\d+:\d+ \s+ \d+-\d+-\d+ \s+ \d+:\d+:\d+ .* \Z) |msx ;
   @@down_recs   = split /\n/, $downs ;
d954 1
d965 3
a968 1

d972 1
d991 1
a991 1
  my $x = Nagios::Report->new(q<local_cgi>, [ '24x7' ], 'thismonth')
d1089 5
d1095 1
a1095 1
  2 dev_debug - read data from the DATA filenhandle (in the module text). For development only.
d1108 1
a1108 1
=item * mkreport (FIELD_LIST, SELECTOR_CALLBACK, ORDER_CALLBACK, MUNGE_CALLBACK)
d1145 9
@


1.34
log
@1 Add lastweek and thisweek to interval filters.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.33 2005-11-12 20:15:21+11 sh1517 Exp sh1517 $
d6 3
d146 1
a146 1
$VERSION = '0.010';
d150 1
a150 1
use constant REMOTE_USER		=> 'sh1517' ;
d154 7
d162 2
a163 1
							$ENV{QUERY_STRING}	= shift @@_ ;
d165 2
a166 1
							$ENV{REMOTE_USER}	= REMOTE_USER ;
d172 29
d207 1
a207 1
q(http://nms/nagios/cgi-bin/avail.cgi?host=HOST&t1=T1&t2=T2&show_log_entries=&assumeinitialstates=yes&assumestateretention=yes&includesoftstates=no&backtrack=0) ;
d210 1
a210 1
q(http://nms/nagios/cgi-bin/trends.cgi?host=HOST&t1=T1&t2=T2&show_log_entries=&assumeinitialstates=yes&assumestateretention=yes&includesoftstates=no&backtrack=0) ;
d231 2
a232 1
	local_cgi	=> LOCAL_CGI,
d234 1
a234 1
	DEFAULT		=> sub { die "Data source should be 'local_cgi' or 'dev_debug'. Bad user.\n" },
d322 5
a326 1
       $user_data = $source_tag eq 'local_cgi' 
d328 8
a335 1
				$user_data =~ s/REPORT_PERIOD/$rep_period/;
d344 53
d398 5
a402 2
    my @@avail_cgi ;
       chomp( @@avail_cgi = $data_source{$source_tag}->($user_data) ) ;
d404 1
a404 1
    my @@avail_rep = splice(@@avail_cgi, 6) ;
d421 1
a421 1
         # $avail_url =~ s/T2/$t2/ ;
d426 1
a426 2
         # $trend_url =~ s/T1/$t1/ ;
         # $trend_url =~ s/T2/$t2/ ;
d462 1
a462 1
  my ($me, $these_fields, $select_these, $this_order, $alter) = @@_ ;
d474 3
d491 2
d531 38
d928 55
d984 36
a1277 6
Cache-Control: no-store
Pragma: no-cache
Last-Modified: Mon, 24 Oct 2005 06:05:27 GMT
Expires: Thu, 01 Jan 1970 00:00:00 GMT
Content-type: text/plain

a1402 6
Cache-Control: no-store
Pragma: no-cache
Last-Modified: Mon, 24 Oct 2005 06:05:27 GMT
Expires: Thu, 01 Jan 1970 00:00:00 GMT
Content-type: text/plain

a1527 6
Cache-Control: no-store
Pragma: no-cache
Last-Modified: Mon, 24 Oct 2005 06:05:27 GMT
Expires: Thu, 01 Jan 1970 00:00:00 GMT
Content-type: text/plain

@


1.33
log
@1 Improve the interval calculating callbacks in the %stime_etime despatch table.
2 Remove obsolete first_last_month (replaced by thismonth or lastmonth callbacks).
3 Export %st_et the interval despatch table.
4 POD revisions.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.32 2005-11-11 19:42:47+11 sh1517 Exp sh1517 $
d6 6
d211 3
a213 2
	thisyear	=> sub { my $t = time(); 
				( $t - ($_[1]->[SEC] + 60 *($_[1]->[MIN] + 60 * $_[1]->[HOUR]) + 86_400 * $_[1]->[YDAY]),
d217 5
a221 3
	lastyear	=> sub { 
				( timelocal(0, 0, 0, 1, 0, $_[1]->[YEAR] - 1),
				  timelocal(0, 0, 0, 1, 0, $_[1]->[YEAR])
d225 3
a227 1
				 ( timelocal(0, 0, 0, 1, $_[1]->[MON], $_[1]->[YEAR]), time() )
d234 10
@


1.32
log
@pre 0.010
1 Pass a filter option to constructor to only report on availability only during a specific
  timeperiod (using the same names as Nagios: lastweek, lastmonth, lastyear).
  Only some of the timeperiods implemented (hacks at that) and not tested.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.31 2005/11/07 23:42:16 sh1517 Exp sh1517 $
d6 6
d128 2
a129 1
use vars qw($VERSION @@EXPORT @@EXPORT_OK);
d132 1
d134 1
a134 2

@@EXPORT = qw(t2hms comp max_l) ;
d189 1
a189 1
my %stime_etime = (
d194 10
a203 2
	today		=> sub { my $t = time(); my @@t = localtime();
				($t - ($t[SEC] + 60 *($t[MIN] + 60 * $t[HOUR])), $t)
d205 4
a208 3
	yesterday	=> sub { my $t = time(); my @@t = localtime();
				 my $mid = $t - ($t[SEC] + 60 *($t[MIN] + 60 * $t[HOUR])) ;
				($mid - 86_400, $mid)
d210 4
a213 2
	thisyear	=> sub { my $t = time(); my @@t = localtime();
				($t - ($t[SEC] + 60 *($t[MIN] + 60 * $t[HOUR]) + 86_400 * $t[YDAY]), $t)
d215 8
a222 4
							# XXXX
	lastyear	=> sub { my $t = time(); my @@t = localtime();
				 my $syear = $t - ($t[SEC] + 60 *($t[MIN] + 60 * $t[HOUR]) + 86_400 * $t[YDAY]) ;
				($syear - 86_400 * 365.25 , $syear)
a223 2
	thismonth	=> \&first_last_month,
	lastmonth	=> \&first_last_month,
d226 2
a680 41
sub first_last_month {
  my ($timeperiod, $now) = @@_ ;
							# Returns first and last day of the
							# arg (a digit representing a month
							# date ie 0..11) or the current month.

  die "Should be called with one of thismonth | lastmonth"
    unless $timeperiod =~ /^(?:last|this)month/ ;

  my ($mon, $year, $first, $last) ;
  $mon  = $now->[MON] ;
  $year = $now->[YEAR] ;
  $mon  = $mon > 1  ? $mon - 1 : 11 
          if $timeperiod eq 'lastmonth' ;
  $year = $year - 1 
          if $timeperiod eq 'lastmonth' and $mon == 11 ;

  $first = timelocal(0, 0, 0, 1, $mon,            $year, undef, undef) ;
  $last  = timelocal(0, 0, 0, 1, ($mon + 1) % 12, $mon == 11 ? $year + 1 : $year, undef, undef) - 60 ;

  return ($first, $last) ;

}

sub first_last_day {
  my ($timeperiod, $now) = @@_ ;

  die "Should be called with one of today | yesterday"
    unless $timeperiod =~ /^(?:to|yester)day/ ;

  my ($day, $mon, $year, $first, $last) ;
  $day  = $timeperiod =~ /^today/ ? $now->[MDAY] : $now->[MDAY] - 1 ;
  $mon  = $now->[MON] ;
  $year = $now->[YEAR] ;
  $first = timelocal(0, 0, 0, $day, $mon,            $year, undef, undef) ;
  $last  = timelocal(0, 0, 0, $day, $mon,            $year, undef, undef) ;

  return ($first, $last) ;

}

d861 1
a861 1
=item * new (DATA_SOURCE, REPORT_PERIODS TIME_PERIODS)
d876 3
a878 1
interval from which availability data will be selected. The list specification is B<not> implemented.
@


1.31
log
@0.009
1 Export comp(), a function that returns the comparator function for ordering the records.
2 Initialise the column widths to 1.5 times the fieldname lengths in excel_dump(). This is
  done because when the field names are bolded (col headers), they are wider than length
  of the fieldnames.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.30 2005-11-03 20:52:33+11 sh1517 Exp sh1517 $
d6 7
a122 1
# use vars qw($VERSION @@ISA @@EXPORT @@EXPORT_OK);
a125 1
# @@ISA = qw(Exporter) ;
d130 1
a130 1
$VERSION = '0.009';
d150 1
a150 1
q(show_log_entries=&host=all&timeperiod=thismonth&rpttimeperiod=REPORT_PERIOD&assumeinitialstates=yes&assumestateretention=yes&assumestatesduringnotrunning=yes&includesoftstates=no&initialassumedhoststate=3&initialassumedservicestate=6&backtrack=0&csvoutput) ;
d182 23
a204 1

d208 1
a208 1
  my ($class, $source_tag, @@time_periods) = @@_ ;
d210 11
a220 1
  my @@report_period = @@time_periods ? @@time_periods : qw(DEST_Optus_SLA_hours 24x7) ;
d232 1
a232 1
  my ($t1, $t2) 	= &first_last_of_month() ;
d236 1
a236 1
    my $user_data ;
d238 10
a247 1
			? do { ($user_data = QS_TEMP) =~ s/REPORT_PERIOD/$rep_period/; $user_data }
d268 2
a269 2
         $avail_url =~ s/T1/$t1/ ;
         $avail_url =~ s/T2/$t2/ ;
d273 3
a275 2
         $trend_url =~ s/T1/$t1/ ;
         $trend_url =~ s/T2/$t2/ ;
d659 2
a660 2
sub first_last_of_month {
  my ($mon) = shift @@_ ;
a663 2
  my @@t = localtime() ;
  my $year ;
d665 2
a666 2
  $mon ||= $t[MON] ;
  $year  = $t[YEAR] ;
d668 7
a674 2
  my $fd = timelocal(0, 0, 0, 1, $mon,            $year, undef, undef) ;
  my $ld = timelocal(0, 0, 0, 1, ($mon + 1) % 12, $mon == 11 ? $year + 1 : $year, undef, undef) - 60 ;
d676 21
a696 1
  return ($fd, $ld) ;
d790 1
a790 1
  my $x = Nagios::Report->new(q<dev_debug>, q<Test>)
d880 1
a880 1
=item * new (DATA_SOURCE, TIME_PERIODS)
d891 5
a895 2
C<TIME_PERIODS> is the name of a Nagios time period (conventionally defined in timeperiods.cfg) for which the
availability data will be computed (by the CGI).
@


1.30
log
@0.008
1 excel_dump() changes to set column widths correctly (call set_column() before calling ->write()).
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.29 2005-11-02 18:57:59+11 sh1517 Exp sh1517 $
d6 4
d112 1
a112 1
use Exporter ;
d115 2
a116 1
use vars qw($VERSION @@ISA @@EXPORT @@EXPORT_OK);
d120 1
a120 1
@@ISA = qw(Exporter) ;
d122 1
a122 1
@@EXPORT = qw(t2hms) ;
d125 1
a125 1
$VERSION = '0.008';
d164 7
d177 2
d415 2
a416 1
      $max_col_width[$col++] = length($c) ;
d630 75
d720 1
a720 1
  my $x = Nagios::Report->new(q<dev_debug>)
a722 3
							# my $x = Nagios::Report->new(q<dev_debug>, q<test>)

							# Only display these fields in this order.
d731 1
a733 16
							# Prob should be part of object - sort
							# descending by max of TIME_UNREACHABLE and TIME_DOWN
  sub by_down_time { 
    my %f = @@_ ;
    my $d = $f{TOTAL_TIME_DOWN} ;
    my $u = $f{TOTAL_TIME_UNREACHABLE} ;
							# $a, $b are package globals (in same package as sort call)
							# ==> if the callback refers to $a and $b in the default
							# package (main::), they will have null values in the
							# package where the sort takes place.
    package Nagios::Report ;
    my $x = $a->[$d] >= $a->[$u] ? $a->[$d] : $a->[$u] ;
    my $y = $b->[$d] >= $b->[$u] ? $b->[$d] : $b->[$u] ;
    $y <=> $x ;
  }

d735 1
a735 1
							# Display these fields only (in the order of the list)
d737 1
a738 1
							# [] means display all the fields.
d742 3
a744 6

							# Callback is called with @@_ loaded 
							# with a list of field names and their vals for this
							# record. Usually copied to a hash so it can be used as
							# one.
							# eg first pair of @@_ could be (HOST_NAME, 'Taree_DEST_router')
d747 1
a747 2
							# sub { 1 },

d749 1
a749 2
							# sub { my %F = @@_; my $h = $F{HOST_NAME}; $h =~ /^Alb/ },

d752 1
a752 2
							# sub { $_{HOST_NAME} =~ /^Alb/ }

d757 1
a757 2
							# Same but harder
							# sub { package Nagios::Report; $b->[16] <=> $a->[16] },
d759 1
a759 1
							# Sort order
d761 1
a761 2
		\&by_down_time,
							# NB $a and $b are in the class package !!
d763 10
a772 8
							# @@_ is loaded with a __list_ of fieldnames and array offsets
							# eg splice(@@_, 0, 2)		== (HOST_NAME, 0)
							# eg splice(@@_, 32, 2)		== (TOTAL_TIME_DOWN, 16)

							# By TOTAL_DOWN_TIME descending.
							# sub { my %f = @@_ ; package Nagios::Report;
							#       $b->[$f{TOTAL_TIME_DOWN}] <=> $a->[$f{TOTAL_TIME_DOWN}]
							#      },
a775 1

d883 40
d931 1
@


1.29
log
@1 Changes to excel_dump() to try and
  1.1 Bold column headers
  1.2 Set column width proportional to col header length.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.28 2005-11-02 10:33:00+11 sh1517 Exp sh1517 $
d6 5
d120 1
a120 1
$VERSION = '0.007';
d389 2
d393 6
a398 1
    my $col = 0 ;
d401 21
a422 1
      $worksheet->set_column($col, $col, length($c)) ;
d426 3
a428 2
    my $row = 1 ; 
    foreach my $r ( @@{$down_times} ) {
d432 1
a432 1
          $worksheet->write_url($row, $col, $c, $h ? "${h}" : 'availability/trend') ;
@


1.28
log
@1 Change label of URL (to hostname from 'hostname availability records').
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.27 2005-11-01 21:39:36+11 sh1517 Exp sh1517 $
d6 3
a137 2
# q(http://nms/nagios/cgi-bin/avail.cgi?show_log_entries=&host=HOST&assumeinitialstates=yes&assumestateretention=yes&includesoftstates=no&timeperiod=thismonth&backtrack=0)  ;

a139 1

a141 1
# q(http://nms/nagios/cgi-bin/trends.cgi?host=HOST&assumeinitialstates=yes&assumestateretention=yes&assumestatesduringnotrunning=yes&includesoftstates=no&initialassumedservicestate=0&initialassumedhoststate=0&backtrack=0&timeperiod=thismonth) ;
d376 3
d383 1
a383 1
    my $worksheet = $workbook->addworksheet($rep) ;
d389 3
a391 1
      $worksheet->write(0, $col++, $c)
@


1.27
log
@0.007
1 Add usage checks to mkreport().
2 Add test of mkreport() - hack away, hack away.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.26 2005-11-01 18:48:38+11 sh1517 Exp sh1517 $
d6 5
d395 1
a395 1
          $worksheet->write_url($row, $col, $c, $h ? "${h} availability records" : 'availability records') ;
@


1.26
log
@0.007
1 Remove commented out code.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.25 2005-11-01 18:42:13+11 sh1517 Exp sh1517 $
d6 4
d24 1
a24 1
# 1 Allow fields added by alter() (in mkreport()) to be reordered.
d257 28
@


1.25
log
@1 Use write_url() in excel_dump for URL output (so that the
  label is not a very long URL in the worksheet).
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.24 2005-11-01 18:23:51+11 sh1517 Exp sh1517 $
d6 4
d103 1
a103 1
$VERSION = '0.006';
a222 8
  # while (<DATA>) {
    # next 
      # if /^\s*#/ ;
    # last
      # if /^END_OF_FILE_MARKER$/ ;
    # push @@avail_rep, $_ ;
  # }

a227 1
    # my ($r) = $data =~ /(?<=^# $rep_period\n)(.*)(?=^END_OF_FILE_MARKER)/sm ;
a303 6
							# XXXX
							# The new fields are __not__ visible in
							# the object; the {REPORTS}{$rep} data
							# structure has no FIELDS attribute
							# that contains the offsets of the
							# added fields ....
a311 2
        # push @@{ $me->{REPORTS}{$rep}{RECORDS} },
		# [ @@{$_}[@@fields{@@field_names}, @@added_indices] ] ;
a533 3
  # my @@fd = (0, 0, 0, 1, $mon,      $year, undef, undef) ;
  # my @@ld = (0, 0, 0, 1, $mon + 1,  $year, undef, undef) ;

a536 8
  # my $fd = timelocal(@@fd) ;
  # my $ld = timelocal(@@ld)  - 60 ;
  # my $fd_str = localtime($fd) ;
  # my $ld_str = localtime($ld) ;

  # print "First day of this month: ", $fd, "\t", $fd_str, "\n" ;
  # print "Last  day of this month: ", $ld, "\t", $ld_str, "\n" ;

a539 3



@


1.24
log
@1 Change avail and trends URLs to use 'custom time period' nvps (ie t1=&t2=& instead of
  timeperiod=thismonth) so that the URLs still function - from the spreadsheets links
  get the report month and _not_ the current month.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.23 2005-11-01 13:00:45+11 sh1517 Exp sh1517 $
d6 5
d370 6
a375 1
        $worksheet->write($row, $col++, $c)
@


1.23
log
@0.006
1 Minor POD changes.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.22 2005-11-01 12:50:11+11 sh1517 Exp sh1517 $
d6 4
d83 1
d117 4
a120 1
q(http://nms/nagios/cgi-bin/avail.cgi?show_log_entries=&host=HOST&assumeinitialstates=yes&assumestateretention=yes&includesoftstates=no&timeperiod=thismonth&backtrack=0)  ;
d123 2
a124 1
q(http://nms/nagios/cgi-bin/trends.cgi?host=HOST&assumeinitialstates=yes&assumestateretention=yes&assumestatesduringnotrunning=yes&includesoftstates=no&initialassumedservicestate=0&initialassumedhoststate=0&backtrack=0&timeperiod=thismonth) ;
d126 11
d159 1
d186 2
d191 2
d525 33
@


1.22
log
@1 Allow fields added by alter() (in mkreport()) to be reordered.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.21 2005-11-01 10:58:03+11 sh1517 Exp sh1517 $
d6 3
d525 1
d527 1
d552 1
a552 1
		[],
d601 2
a602 2
				&Nagios::Report::time2ddhhmmss($F{TOTAL_TIME_DOWN} ),
				&Nagios::Report::time2ddhhmmss($F{TOTAL_TIME_UNREACHABLE} ) ;
d651 2
a652 1
The fields appear in the report in the same order they have in this list.
d681 1
a681 1
slicing the results - masking fields that are not wanted in the report - and storing themas a report for each time period.
d708 2
a709 1
=item * Does not do much more than the standard availability CGI
a710 1
=item * Top of form processing not implemented (or understood) properly.
@


1.21
log
@1 Export an alias of time2ddhhmss (for use by mkreport() callbacks).
2 Fix bug in from_data_handle(): now only reads the entries corresp
  to the specified time period.
3 Realise that the alter() callback processing in mkreport() is broken
  in that it makes it hard to reorder the complete set of fields after
  alter() callback has added some. This segment needs to retain
  the amended %field map so the slice can get the offsets of all
  the fields (including those added by for example t2hms($F{TOTAL_TIME_UP}).
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.20 2005-10-31 08:36:10+11 sh1517 Exp sh1517 $
d6 10
d222 4
d250 1
d269 1
d282 4
d288 4
a291 1
		[ @@{$_}[@@fields{@@field_names}, @@added_indices] ] ;
d294 1
a294 1
      $me->{REPORTS}{$rep}{FIELDNAMES} =  [ @@field_names, @@new_field_names ] ;
@


1.20
log
@1 Correct minor typo/warning in constructor.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.19 2005-10-31 08:32:36+11 sh1517 Exp sh1517 $
d6 3
a63 1
use vars qw($VERSION);
d65 12
a76 1
$VERSION = '0.005';
d98 1
a98 1
use constant QS_AVAIL_REP		=>
d101 3
d132 1
a132 1
			: '' ;
d139 1
a139 1
    $schema			.= ', AVAIL_URL' ;
d150 6
a155 3
      my $qs = QS_AVAIL_REP ;
         $qs =~ s/HOST/$host/ ;
      $vals[ $me->{FIELDS}{AVAIL_URL} ] = $qs ;
d167 2
a168 1
sub from_data_handle {
d170 1
a170 1
  my @@avail_rep = () ;
d172 20
a191 7
  while (<DATA>) {
    next 
      if /^\s*#/ ;
    last
      if /^END_OF_FILE_MARKER$/ ;
    push @@avail_rep, $_ ;
  }
d193 1
a193 1
  @@avail_rep ;
d195 1
d202 2
d205 1
a205 1
							#                to report on
d207 1
a207 1
							#                records
d239 1
a239 1
							# this package ...
d245 1
a245 1
							# alter->() updates the
d247 4
a250 2
							# adding new fields to the end and
							# returning the names of the added fields
a251 4
							# XXXX
							# If alter() adds fields,
							# they will be shown in the
							# report.
d260 7
d394 3
a399 3
    $d += 150 ;
    $d =  int($d/300) * 300 ;

d401 1
a401 1
    $s = '' ;
d481 225
a982 226


__END__

=head1 NAME

Nagios::Report - Perl class to filter and munge Nagios availability data

=head1 SYNOPSIS

  use Nagios::Report ;

  my $x = Nagios::Report->new(q<dev_debug>)
    or die "Can't construct Nagios::Report object." ;

							# my $x = Nagios::Report->new(q<dev_debug>, q<test>)

							# Only display these fields in this order.
  my @@these_fields = qw(
    HOST_NAME
    PERCENT_TOTAL_TIME_UP
    TOTAL_TIME_DOWN
    TOTAL_TIME_UNREACHABLE
    AVAIL_URL
  ) ;

							# Prob should be part of object - sort
							# descending by max of TIME_UNREACHABLE and TIME_DOWN
  sub by_down_time { 
    my %f = @@_ ;
    my $d = $f{TOTAL_TIME_DOWN} ;
    my $u = $f{TOTAL_TIME_UNREACHABLE} ;
							# $a, $b are package globals (in same package as sort call)
							# ==> if the callback refers to $a and $b in the default
							# package (main::), they will have null values in the
							# package where the sort takes place.
    package Nagios::Report ;
    my $x = $a->[$d] >= $a->[$u] ? $a->[$d] : $a->[$u] ;
    my $y = $b->[$d] >= $b->[$u] ? $b->[$d] : $b->[$u] ;
    $y <=> $x ;
  }

  $x->mkreport(
							# Display these fields only (in the order of the list)


							# [] means display all the fields.
		[],
							# Record selector


							# Callback is called with @@_ loaded 
							# with a list of field names and their vals for this
							# record. Usually copied to a hash so it can be used as
							# one.
							# eg first pair of @@_ could be (HOST_NAME, 'Taree_DEST_router')

							# All records
							# sub { 1 },

							# All records whose HOST_NAME starts with 'Alb'
							# sub { my %F = @@_; my $h = $F{HOST_NAME}; $h =~ /^Alb/ },

							# Regrettably, this is _NOT_ the same since
							# @@_ can't be used as a hash.
							# sub { $_{HOST_NAME} =~ /^Alb/ }

							# All records with an up time percent < 98%

		sub { my %F = @@_; my $u = $F{PERCENT_TOTAL_TIME_UP}; $u =~ s/%//; $u < 98 },

							# Same but harder
							# sub { package Nagios::Report; $b->[16] <=> $a->[16] },

							# Sort order

		\&by_down_time,
							# NB $a and $b are in the class package !!

							# @@_ is loaded with a __list_ of fieldnames and array offsets
							# eg splice(@@_, 0, 2)		== (HOST_NAME, 0)
							# eg splice(@@_, 32, 2)		== (TOTAL_TIME_DOWN, 16)

							# By TOTAL_DOWN_TIME descending.
							# sub { my %f = @@_ ; package Nagios::Report;
							#       $b->[$f{TOTAL_TIME_DOWN}] <=> $a->[$f{TOTAL_TIME_DOWN}]
							#      },

							# Optional callback to add or mangle fields.


							# Add 2 fields for downtime vals in hours minutes and secs.

		sub {	$_ = shift @@_;
			my %F = @@_;
			push @@$_, 
				&Nagios::Report::time2ddhhmmss($F{TOTAL_TIME_DOWN} ),
				&Nagios::Report::time2ddhhmmss($F{TOTAL_TIME_UNREACHABLE} ) ;
			qw(TIME_DOWN_HHMMSS TIME_UNREACH_HHMMSS)
		    }

  ) ;

  $x->debug_dump ;
							# $x->csv_dump ;



=head1 DESCRIPTION

Gets the Nagios (http://wwww.Nagios.ORG/) B<All Hosts> availability report (in CSV format) and applies grep like filters, 
map like munging, and slice like field masks to produce a report which can be output in
various ways.

This class provides extra control over the content and disposition of the data produced by the
Nagios availability CGI, by writing for example a spreadsheet containing the selected data. 

Since the data originates from standard Nagios availability CGI, its results are no more accurate - and should be
exactly the same - as that CGI.


=head1 METHODS

=over 4

=item * new (DATA_SOURCE, TIME_PERIODS)


This is the constructor of the Nagios::Report object.

C<DATA_SOURCE> is one of

  1 local_cgi - get the data by running the availability report CGI on the local host.

  2 dev_debug - read data from the DATA filenhandle (in the module text). For development only.

C<TIME_PERIODS> is the name of a Nagios time period (conventionally defined in timeperiods.cfg) for which the
availability data will be computed (by the CGI).

The constructor gets the Nagios availability data (in CSV format) for the specified time period(s) and store it in
the object.

=item * mkreport (FIELD_LIST, SELECTOR_CALLBACK, ORDER_CALLBACK, MUNGE_CALLBACK)

E<10>
C<FIELD_LIST> is a reference to an array containing the field names that will appear in the report (a logical slice of the reports fields).
The fields appear in the report in the same order they have in this list.

C<SELECTOR_CALLBACK> is a reference to a user supplied subroutine that will return B<true> if the record is to be included in the report.
The subroutine is called with an argument list of field names and their values for this record. This argument list
can be copied to a hash in the callback, conventionally named B<%F>, so that the field names can be used in expressions like

$F{HOST_NAME} =~ /^foo/

to select eligible records.

C<ORDER_CALLBACK> is a reference to a user supplied sort subroutine that determines the order of the records in the report. The
subroutine is called with an argument list of field names and their offsets in the records (eg (HOST_NAME, 0)). This argument list
can be copied to a hash in the callback, conventionally named B<%f>, so that the field names can be used in expressions like

$a->[$f{TOTAL_TIME_DOWN}] <=> $b->[$f{TOTAL_TIME_DOWN}]

to sort the records based on the field values.

C<MUNGE_CALLBACK> is a reference to a user supplied subroutine that is used to munge (transform input to output) the records. The subroutine
is called with a pointer to a record and a list of field names and their values for this record. The callback is expected to modify the record
in place, munging fields with expressions like

$F{TOTAL_DOWN_TIME} = 0

and or adding fields and their values.

If the callback adds fields to the record, it should append them to the end of the record and return the list of field names to mkreport().

mkreport() takes the availability data for each time period, applies the filter and does any specified munging, before
slicing the results - masking fields that are not wanted in the report - and storing themas a report for each time period.
mkreport() must be run before any of the output methods.

=item * excel_dump (EXCEL_FILENAME)

excel_dump writes a Workbook in the specified filename. The workbook contains a worksheet for each report (ie one for each time period
specified by the constructor). excel_dump() requires the John McNamara's B<excellent> CPAN module, Spreadsheet::WriteExcel.

E<10>
C<EXCEL_FILENAME> is the path of the file in which the Excel workbook will be written.

=item * csv_dump 

CSV formatted output on STDOUT. Note that this mainly useful for debugging since the 
cell data is not formatted should it be imported by Excel

=item * dev_debug (FIELD_WIDTH, FIELDS_PER_LINE)

report formatted output on STDOUT.

=back


=head1 BUGS

=over 4

=item * Does not do much more than the standard availability CGI

=item * Top of form processing not implemented (or understood) properly.

=back


=head1 SEE ALSO

perl(1).

Nagios (http://www.Nagios.ORG/)


=head1 AUTHOR

Stanley Hopcroft <HopcroftS@@CPAN.Org>

=head1 COPYRIGHT

Copyright (c) 2005 Stanley Hopcroft. All rights reserved.
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

@


1.19
log
@1 excel_dump()
  1.1 die only if require 'Spreadsheet..' raises an exception.
  1.2 if called without an arg, use EXCEL_FILENAME as the spreadsheet filename.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.18 2005-10-30 18:12:26+11 sh1517 Exp sh1517 $
d6 5
d113 1
a113 1
    my $user_data,  ;
@


1.18
log
@0.005
1 More efficient time2ddhhmmss().
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.17 2005-10-29 23:42:53+10 sh1517 Exp sh1517 $
d6 4
d244 2
a245 1
    die "John McNamara's _excellent_ CPAN module, Spreadsheet::WriteExcel is needed by excel_dump(). Outahere." ;
d247 1
a247 1
  my $workbook  = Spreadsheet::WriteExcel->new($excel_filename) ;
@


1.17
log
@1 unset $- in debug_dump() to force a top of page (and so write the top of form header).
2 tiny POD changes.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.16 2005-10-29 22:20:11+10 sh1517 Exp sh1517 $
d6 4
d54 1
a54 1
$VERSION = '0.004';
d328 30
a357 1
sub time2ddhhmmss {
d359 1
a359 21
  my $difference = shift @@_ ;
							# Perl Cookbook, Ch 3 section 6. ORA
							# Torkington and Christiansen.
  my ($seconds, $minutes, $hours, $days, $weeks) = (0, 0, 0, 0, 0) ;
  my @@u = qw(w d h m s) ;
  my @@ts = () ;

  return 0
    unless $difference ;

  $difference += 150 ;
  $difference =  int($difference/300) * 300 ;

  $seconds    =  $difference % 60; push @@ts, $seconds ;
  $difference = ($difference - $seconds) / 60;
  $minutes    =  $difference % 60; push @@ts, $minutes ;
  $difference = ($difference - $minutes) / 60;
  $hours      =  $difference % 24; push @@ts, $hours ;
  $difference = ($difference - $hours)   / 24;
  $days       =  $difference % 7; push @@ts, $days ;
  $weeks      = ($difference - $days)    /  7; push @@ts, $weeks ;
d361 1
a361 1
  join ' ', map { my $u = shift @@u; $_ ? "${_}$u" : () } reverse @@ts ;
@


1.16
log
@1 Change name of arg to debug_dump from fields_per_page to 'fields_per_line'
2 Add some BUGS to POD.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.15 2005-10-29 22:10:23+10 sh1517 Exp sh1517 $
d6 4
d307 2
a902 11
=head1 AUTHOR

Stanley Hopcroft <HopcroftS@@CPAN.Org>

=head1 COPYRIGHT

Copyright (c) 2005 Stanley Hopcroft. All rights reserved.
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.


d913 6
@


1.15
log
@1 Trap Spreadsheet::WriteExcel load failures (prob ought to have Makefile whine also).
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.14 2005-10-29 21:54:51+10 sh1517 Exp sh1517 $
d6 3
d287 1
a287 1
  my ($me, $field_width, $fields_per_page) = @@_ ;
d290 1
a290 1
  $fields_per_page	||= 7 ;
d307 1
a307 1
    &mkform($field_width, $fields_per_page,@@line)
d348 1
a348 1
  my ($field_width, $fields_per_page) = @@_ ;
d355 2
a356 2
  $pics	= $f1 . " $f"   x ($fields_per_page - 1) ;
  $vals = 'shift(@@_), ' x  $fields_per_page ;
d364 1
a364 1
  my $fields_remaining    = @@_ - $fields_per_page ;
d374 2
a375 2
    my $lines_remaining     = int($fields_remaining / ($fields_per_page - 1)) ;
    my $fields_on_last_line =     $fields_remaining % ($fields_per_page - 1) ;
d378 2
a379 2
    $pics = $spaces . " $f"               x ($fields_per_page - 1) ;
    $vals = $spaces . ' shift(@@_), '      x ($fields_per_page - 1) ;
d879 1
a879 1
=item * dev_debug
d890 3
a892 1
=item * None known of at present.
@


1.14
log
@1 Add 'field_width' 'fields_per_page' args to debug_dump().
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.13 2005-10-29 21:15:25+10 sh1517 Exp sh1517 $
d6 3
d228 2
a229 1
  require Spreadsheet::WriteExcel;
a248 1
							# Downtime records are alreadys sorted by mkreport().
d275 1
a275 1
	join(', ', @@$r), "\n" ;
@


1.13
log
@1 Add some POD.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.12 2005-10-29 15:53:45+10 sh1517 Exp sh1517 $
d6 3
d281 4
a284 1
  my $me = shift @@_ ;
d286 1
a286 1
  my $form_made = 0 ;
d298 5
a302 3
    @@line = @@{ $me->{REPORTS}{$rep}{FIELDNAMES} } ;
    &mkform(@@line)
      unless $form_made++ ;
d342 3
a344 2
  my $form_body = "format STDOUT = \n" ;
  my ($pics, $vals) ;
d346 6
a351 2
  $pics = '@@<<<<<<<<<<<<<<<<<<<<<<<<' . ' @@<<<<<<<<<<<<<<<' x 5 ;
  $vals = 'shift(@@_), ' x 6 ;
d358 2
a359 1
  my $fields_remaining    = @@_ - 6 ;
d364 1
d366 1
d368 2
a369 2
    my $lines_remaining     = int($fields_remaining/5) ;
    my $fields_on_last_line = $fields_remaining % 5 ;
d372 2
a373 2
    $pics = $spaces . ' @@<<<<<<<<<<<<<<<' x 5 ;
    $vals = $spaces . ' shift(@@_), '      x 5 ;
d380 1
a380 1
    $pics = $spaces . ' @@<<<<<<<<<<<<<<<' x $fields_on_last_line ;
@


1.12
log
@0.004
1 Remove obsolete trans() method.
2 Note that alter is called with both the pointer to the report record and the
  hash %F set to the slot names and values (so the callback can access the slots).
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.11 2005-10-29 15:30:11+10 sh1517 Exp sh1517 $
d6 6
d41 4
d46 4
a49 3
							$ENV{QUERY_STRING} = shift @@_ ;
							$ENV{REMOTE_USER}  = 'sh1517' ;
							$ENV{REQUEST_METHOD}= 'GET' ;
d51 1
a51 1
							return `/usr/lib/nagios/cgi/avail.cgi`
d89 1
a89 1
			? ( ($user_data = QS_TEMP) =~ s/REPORT_PERIOD/$rep_period/, $user_data )
a388 25
=begin comment


sub t2ddhhmmss {
  my $difference = shift @@_ ;

  while ($difference > 0) {
    my $b	= shift @@bases ;
    my $unit	= shift @@units ;

    my $u	= $difference % $b ;

    $ts	= "${u}$unit $ts" ;

    $difference = ($difference - $u) / $b ;
  }

  $ts ;

}

=end comment

=cut

a668 1
# Below is the stub of documentation for your module. You better edit it!
d672 1
a672 1
Nagios::Report - Perl extension for blah blah blah
d676 1
a676 1
  use Nagios::Report;
d679 1
d681 3
d692 2
a693 1

d698 4
a701 4
                                                        # $a, $b are package globals (in same package as sort call)
                                                        # ==> if the callback refers to $a and $b in the default
                                                        # package (main::), they will have null values in the
                                                        # package where the sort takes place.
d709 58
a766 3
                \@@these_fields,
                sub { my %F = @@_; my $u = $F{PERCENT_TOTAL_TIME_UP}; $u =~ s/%//; $u < 98 },
                \&by_down_time,
d769 3
a771 1
  $x->csv_dump ;
d776 95
a870 1
Long and Dirty hack to publish records from Nagios Availability report CGI.
a871 1
Any good bits were stolen from Higher Order Perl.
d877 7
d888 7
a894 1
=cut
@


1.11
log
@1 First cut at calling alter() from mkreport(). Seems Ok.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.10 2005-10-29 12:41:23+10 sh1517 Exp sh1517 $
d6 3
d31 1
a31 1
$VERSION = '0.003';
d147 3
a149 2
      my @@vals = @@$_ ;
      my %F ;
d151 1
a168 4
							# XXXX
							# If alter() adds fields,
							# they will be shown in the
							# report.
d170 2
a175 3
        @@vals = @@$_ ;
        @@F{ @@{ $me->{FIELDNAMES} } } = @@vals ;

d177 4
a180 1

a290 47
}

sub trans {
  my ($me, $alter) = @@_ ;

							# XXXX
							# Should vanish and become a 
							# a callback invoked by mkreport()

							# Apply a transformation to each
							# record in the _reports_; _not_
							# the availability records.

							# trans() should be called after mkreport()

  return 
    unless $alter && ref($alter) eq 'CODE' ;

							# alter() is called with a pointer
							# to a downtime record.

							# If alter() adds fields (eg times => hhmmss)
							# it should add them to the end of
							# the record and return the names
							# to trans().
  local $_ ;

  my @@new_fields = () ;
  foreach my $rep (@@{ $me->{REPORT_PERIODS} }) {

    # my @@down_recs = @@{ $me->{REPORTS}{$rep}{RECORDS} } ;
							# XXX must call alter() with a pointer
							# to the report record, not a copy of it.
    @@new_fields = $alter->($_) 
      foreach (@@{ $me->{REPORTS}{$rep}{RECORDS} }) ;
      # foreach (@@down_recs) ;
							# XXXX
							# Add the fieldnames to the reports
    if ( @@new_fields ) {
      push @@{ $me->{REPORTS}{$rep}{FIELDNAMES} }, @@new_fields ;
      my (%f, @@fn) ;
      @@fn		= @@{ $me->{FIELDNAMES} } ;
      @@f{@@fn}	= (0 .. $#fn ) ;
      $me->{REPORTS}{$rep}{FIELDS} = { %f } ;
    }
  }

@


1.10
log
@1 Add a _terrible_ trans() method. trans() should go and
be replaced by a call to the alter() callback in mkreport().
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.9 2005-10-29 10:39:27+10 sh1517 Exp sh1517 $
d6 4
d125 1
a125 1
  my ($me, $these_fields, $select_these, $this_order) = @@_ ;
d132 3
a152 2
    $me->{REPORTS}{$rep}{RECORDS} = [
					map  [ @@{$_}[@@fields{@@field_names}] ],
d154 4
d162 36
d199 2
a200 3
					sort { $this_order->(%fields) } @@rep
				    ] ;
    $me->{REPORTS}{$rep}{FIELDNAMES} =  [ @@field_names ] ;
@


1.9
log
@1 Changes to dump methods to dump reports in order specified by constructor
  (instead of the keys of the REPORTS hash).
2 Try and do top of form processing debug_dump().
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.8 2005-10-28 22:04:05+10 sh1517 Exp sh1517 $
d6 5
d248 5
d254 5
a258 1
							# record in the reports.
d263 3
a265 2
							# to a downtime record. If alter()
							# adds fields (eg times => hhmmss)
d270 1
d272 16
a287 3
  foreach my $rep (keys %{ $me->{REPORTS} }) {
    foreach ( @@{ $me->{REPORTS}{$rep}{RECORDS} } ) {
      @@new_fields = $alter->($_) ;
a288 2
    push @@{ $me->{FIELDNAMES} }, @@new_fields
      if @@new_fields ;
@


1.8
log
@1 Implement dev_debug (by copying Larry Wall's format generation
  code from dotime).
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.7 2005-10-27 23:22:06+10 xwin Exp xwin $
d6 4
a32 2
use constant FIELDS_PER_LINE		=> 8 ;

a74 1
    $me->{SCHEMA}		||= $schema ;
d76 1
a76 2
    $me->{FIELDNUMS} 		||= [ @@fieldnums  = (0..$#fieldnames) ] ;
    @@fields{@@fieldnames}	= @@fieldnums ;
d165 1
a165 1
  foreach my $rep (keys %{ $me->{REPORTS} }) {
d179 1
a179 1
							# Downtime records are sorted already (by mkreport()).
d195 1
a195 1
  foreach my $rep (keys %{ $me->{REPORTS} }) {
d202 2
a203 2
	join(', ',  @@{ $me->{REPORTS}{$rep}{FIELDNAMES} }), "\n" ;
							# Downtime records are sorted already (by mkreport()).
d219 9
a227 1
  foreach my $rep (keys %{ $me->{REPORTS} }) {
d239 25
@


1.7
log
@0.003
1 POD (minimal)
2 Perhaps testable.
@
text
@d3 1
a3 1
# $Id$
d5 6
a10 1
# $Log$
d29 2
d214 2
d217 1
a217 1
1 ;
d219 10
a228 36
=begin comment

my @@these = (
		HOST_NAME,
		PERCENT_TOTAL_TIME_UP,
		AVAIL_URL,
	) ;

my %avail_reports ;

my %down_times = () ;

foreach my $rep (keys %avail_reports) {

  my @@down_times	= () ; 
  my $template		= shift @@{ $avail_reports{$rep} } ;
     $template		.= ', AVAIL_URL' ;
  my @@temp		= split(/,\s+/, $template) ;
  push @@down_times,
	[
	  @@temp[@@these]
	] ;

  foreach $_ ( @@{ $avail_reports{$rep} } ) {
    my @@vals		= split(/,\s+/, $_) ;
    my ($pct_up)	= $vals[PERCENT_TOTAL_TIME_UP] =~ m|(\d+\.\d+)%| ;
    if ( $pct_up <= 99 ) {
      my ($host)	= $vals[HOST_NAME] =~ m|"([^"]+)| ;
      $vals[HOST_NAME]	= $host ;
      my $avail_url = 
       qq(http://nms/nagios/cgi-bin/avail.cgi?show_log_entries=&host=$host&assumeinitialstates=yes&assumestateretention=yes&includesoftstates=no&timeperiod=thismonth&backtrack=0) ;
      push @@vals, $avail_url ;
      push @@down_times,
	[
	  @@vals[@@these]
	] ;
a230 34

  $down_times{$rep} = [ @@down_times ] ;

}

my %despatch_tab = (
	CSV_OUTPUT	=> \&csv_dump,
	EXL_OUTPUT	=> \&excel_dump,
	DBG_OUTPUT	=> \&debug_dump,
	DEFAULT		=> sub { die "Unknown Option." },
) ;

my ($tag, $excel_filename) ;

$despatch_tab{$tag}->(\%down_times, $excel_filename) ;


# ---> That's all folks <-----

sub debug_dump {
  my $down_times = shift @@_ ;

  my @@line = @@{ $down_times->[0] } ;
  format STDOUT =
@@<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<     @@<<<<<<<<<<<<<<<<<<<<     @@<<<<<<<<<<<<<<<     @@<<<<<<<<<<<<<<<   @@<<<<<<<<<<<<<<<     @@<<<<<<<<<<<<<<<<<<<<
$line[0],                                          $line[1],                 $line[2],            $line[3],          $line[4], 
$line[5]
.
  write ;
  foreach ( sort { $b->[2] <=> $a->[2] } @@{ $down_times }[1..$#$down_times] ) {
    @@line = ( $_->[0] , (map { &time2ddhhmmss($_) } @@{$_}[1..$#$_ - 1]), $_->[-1] ) ;
    write ;
  }

a231 2
  

d260 59
@


1.6
log
@1 Slicing of array refs must take place _after_ sort or the
  fields to sort on may be lost after the slice.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.5 2005-10-27 20:08:31+10 xwin Exp xwin $
d5 1
a5 16
# $Log: Report.pm,v $
# Revision 1.5  2005-10-27 20:08:31+10  xwin
# 1 Another HOP steal. Pass selection callback a hash loaded with field vals indexed by name.
#
# Revision 1.4  2005-10-27 18:50:31+10  xwin
# *** empty log message ***
#
# Revision 1.3  2005-10-27 18:37:14+10  xwin
# 1 Replace sort $cb, @@a - that adds a code ref to the output list - with sort $cb @@a ....
#
# Revision 1.2  2005-10-27 17:06:48+10  sh1517
# Not working very well: Not an ARRAY reference at .. line 180.
#
# Revision 1.1  2005-10-27 13:27:14+10  sh1517
# Initial revision
#
d10 1
a10 1
$VERSION = '0.002';
d111 6
a119 1

a130 1
      # @@vals = @@{$_}[@@fields{@@field_names}] ;
d136 6
d626 34
a659 1
  blah blah blah
d663 1
a663 3
Stub documentation for Nagios::Report was created by h2xs. It looks like the
author of the extension was negligent enough to leave the stub
unedited.
d665 1
a665 1
Blah blah blah.
d669 1
a669 1
A. U. Thor, a.u.thor@@a.galaxy.far.far.away
@


1.5
log
@1 Another HOP steal. Pass selection callback a hash loaded with field vals indexed by name.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.4 2005-10-27 18:50:31+10 xwin Exp xwin $
d6 3
d129 1
d137 1
a137 1
         @@F{ @@{ $me->{FIELDNAMES} } } = @@vals ;
d141 1
a141 1
      my @@vals = @@{$_}[@@fields{@@field_names}] ;
d144 5
a148 1
    $me->{REPORTS}{$rep}{RECORDS} = [ sort $this_order @@rep ] ;
@


1.4
log
@*** empty log message ***
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.3 2005-10-27 18:37:14+10 xwin Exp xwin $
d6 3
d131 3
d135 2
a136 1
        unless $select_these->($_, %fields) ;
@


1.3
log
@1 Replace sort $cb, @@a - that adds a code ref to the output list - with sort $cb @@a ....
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.2 2005-10-27 17:06:48+10 sh1517 Exp sh1517 $
d6 3
d180 2
d192 2
d329 262
d604 2
@


1.2
log
@1 Refactor the local_cgi data source.
@
text
@d3 1
a3 1
# $Id: Report.pm,v 1.1 2005-10-26 20:41:20+10 xwin Exp xwin $
d6 4
a9 1
# Revision 1.1  2005-10-26 20:41:20+10  xwin
d16 1
a16 1
$VERSION = '0.001';
d21 1
a21 1
							$ENV{QUERY_STRING} = shift @@ARGV ;
a29 38
use constant {
	HOST_NAME			=> 0,
	TIME_UP_SCHEDULED		=> 1,
	PERCENT_TIME_UP_SCHEDULED	=> 2,
	PERCENT_KNOWN_TIME_UP_SCHEDULED	=> 3,
	TIME_UP_UNSCHEDULED		=> 4,
	PERCENT_TIME_UP_UNSCHEDULED	=> 5,
	PERCENT_KNOWN_TIME_UP_UNSCHEDULED=> 6,
	TOTAL_TIME_UP			=> 7,
	PERCENT_TOTAL_TIME_UP		=> 8,
	PERCENT_KNOWN_TIME_UP		=> 9,
	TIME_DOWN_SCHEDULED		=> 10,
	PERCENT_TIME_DOWN_SCHEDULED	=> 11,
	PERCENT_KNOWN_TIME_DOWN_SCHEDULED=> 12,
	TIME_DOWN_UNSCHEDULED		=> 13,
	PERCENT_TIME_DOWN_UNSCHEDULED	=> 14,
	PERCENT_KNOWN_TIME_DOWN_UNSCHEDULED=> 15,
	TOTAL_TIME_DOWN			=> 16,
	PERCENT_TOTAL_TIME_DOWN		=> 17,
	PERCENT_KNOWN_TIME_DOWN		=> 18,
	TIME_UNREACHABLE_SCHEDULED	=> 19,
	PERCENT_TIME_UNREACHABLE_SCHEDULED=> 20,
	PERCENT_KNOWN_TIME_UNREACHABLE_SCHEDULED=> 21,
	TIME_UNREACHABLE_UNSCHEDULED	=> 22,
	PERCENT_TIME_UNREACHABLE_UNSCHEDULED=> 23,
	PERCENT_KNOWN_TIME_UNREACHABLE_UNSCHEDULED=> 24,
	TOTAL_TIME_UNREACHABLE		=> 25,
	PERCENT_TOTAL_TIME_UNREACHABLE	=> 26,
	PERCENT_KNOWN_TIME_UNREACHABLE	=> 27,
	TIME_UNDETERMINED_NOT_RUNNING	=> 28,
	PERCENT_TIME_UNDETERMINED_NOT_RUNNING=> 29,
	TIME_UNDETERMINED_NO_DATA	=> 30,
	PERCENT_TIME_UNDETERMINED_NO_DATA=> 31,
	TOTAL_TIME_UNDETERMINED		=> 32,
	PERCENT_TOTAL_TIME_UNDETERMINED	=> 33,
	AVAIL_URL			=> 34,
} ;

d32 3
a34 1
# q(show_log_entries=&host=all&timeperiod=thismonth&smon=10&sday=1&syear=2005&shour=0&smin=0&ssec=0&emon=10&eday=20&eyear=2005&ehour=24&emin=0&esec=0&rpttimeperiod=REPORT_PERIOD&assumeinitialstates=yes&assumestateretention=yes&assumestatesduringnotrunning=yes&includesoftstates=no&initialassumedhoststate=3&initialassumedservicestate=6&backtrack=0&csvoutput) ;
d48 10
a57 1
  my %avail_report ;
d68 21
a88 1
    my @@avail_report = splice(@@avail_cgi, 6) ;
d90 1
a90 1
    $avail_report{$rep_period} =  [ map { [ split /,\s+/ ] } @@avail_report ] ;
d94 1
a94 1
  bless \%avail_report, ref($class) || $class ;
d114 76
a249 51

sub csv_dump {
  my $down_times = shift @@_ ;

  print join(',', @@{$down_times->[0]}), "\n" ;
  foreach ( sort { $b->[2] <=> $a->[2] } @@{$down_times}[1..$#$down_times] ) {
    my @@line = ( $_->[0] , (map { &time2ddhhmmss($_) } @@{$_}[1..$#$_ - 1]), $_->[-1] ) ;
    print join(',', @@line), "\n" ;
  }
}


sub excel_dump {
  my ($down_times_hr, $excel_filename) = @@_ ;

  require Spreadsheet::WriteExcel;

  my $workbook  = Spreadsheet::WriteExcel->new($excel_filename) ;
  die "Spreadsheet::WriteExcel constructor failed, prob opening '$excel_filename': $!"
    unless $workbook ;

  foreach my $rep (keys %$down_times_hr) {

    my $down_times = $down_times_hr->{$rep} ;

    my $worksheet = $workbook->addworksheet($rep) ;
							# The general syntax is write($row, $column, $token).
							# Note that row and column are zero indexed
    my $col = 0 ;

    foreach my $c (@@{$down_times->[0]}) {
      $worksheet->write(0, $col++, $c)
    }
 
    my $row = 1 ; 
    foreach my $r (
			map $_->[0],
			sort { $b->[1] <=> $a->[1] }
			map [ $_, $_->[1] =~ /(\d+\.\d+)%/ ], @@{$down_times}[1..$#$down_times]
		  ) {
      $col = 0 ;
      foreach my $c ( @@$r ) {
      # foreach my $c ($r->[0], (map &time2ddhhmmss($_), @@{$r}[1..$#$r - 1]), $r->[-1]) {
        $worksheet->write($row, $col++, $c)
      }
      $row++ ;
    }
  }

}

d322 1
a322 1
# 24x7
a333 118
"Albany_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2040237, 99.761%, 99.761%, 2040237, 99.761%, 99.761%, 0, 0.000%, 0.000%, 4890, 0.239%, 0.239%, 4890, 0.239%, 0.239%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Albury_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Albury_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Armidale_DEST_router", 0, 0.000%, 0.000%, 2042717, 99.882%, 99.882%, 2042717, 99.882%, 99.882%, 0, 0.000%, 0.000%, 290, 0.014%, 0.014%, 290, 0.014%, 0.014%, 0, 0.000%, 0.000%, 2120, 0.104%, 0.104%, 2120, 0.104%, 0.104%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Armidale_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2043017, 99.897%, 99.897%, 2043017, 99.897%, 99.897%, 0, 0.000%, 0.000%, 2110, 0.103%, 0.103%, 2110, 0.103%, 0.103%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"BENSW201", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"BENSW202", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"BENSW203", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"BNESW400", 0, 0.000%, 0.000%, 2044935, 99.991%, 99.991%, 2044935, 99.991%, 99.991%, 0, 0.000%, 0.000%, 192, 0.009%, 0.009%, 192, 0.009%, 0.009%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Bendigo_DEST_router", 0, 0.000%, 0.000%, 955207, 46.706%, 46.706%, 955207, 46.706%, 46.706%, 0, 0.000%, 0.000%, 1089920, 53.294%, 53.294%, 1089920, 53.294%, 53.294%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Bendigo_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Brisbane_State_Office_DEST_router", 0, 0.000%, 0.000%, 2045057, 99.997%, 99.997%, 2045057, 99.997%, 99.997%, 0, 0.000%, 0.000%, 70, 0.003%, 0.003%, 70, 0.003%, 0.003%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Brisbane_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Broken_Hill_DEST_router", 0, 0.000%, 0.000%, 2041059, 99.801%, 99.801%, 2041059, 99.801%, 99.801%, 0, 0.000%, 0.000%, 280, 0.014%, 0.014%, 280, 0.014%, 0.014%, 0, 0.000%, 0.000%, 3788, 0.185%, 0.185%, 3788, 0.185%, 0.185%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Broken_Hill_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2041239, 99.810%, 99.810%, 2041239, 99.810%, 99.810%, 0, 0.000%, 0.000%, 3888, 0.190%, 0.190%, 3888, 0.190%, 0.190%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Bunbury_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Bunbury_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"CWASW201", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"CWASW202", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"CyberTrust_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"DARSW000", 0, 0.000%, 0.000%, 2044239, 99.957%, 99.957%, 2044239, 99.957%, 99.957%, 0, 0.000%, 0.000%, 888, 0.043%, 0.043%, 888, 0.043%, 0.043%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"DUBSW200", 0, 0.000%, 0.000%, 1881740, 92.011%, 92.011%, 1881740, 92.011%, 92.011%, 0, 0.000%, 0.000%, 163387, 7.989%, 7.989%, 163387, 7.989%, 7.989%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Darwin_State_Office_DEST_router", 0, 0.000%, 0.000%, 2043678, 99.929%, 99.929%, 2043678, 99.929%, 99.929%, 0, 0.000%, 0.000%, 1449, 0.071%, 0.071%, 1449, 0.071%, 0.071%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Darwin_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045027, 99.995%, 99.995%, 2045027, 99.995%, 99.995%, 0, 0.000%, 0.000%, 100, 0.005%, 0.005%, 100, 0.005%, 0.005%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Dubbo_DEST_router", 0, 0.000%, 0.000%, 1881750, 92.011%, 92.011%, 1881750, 92.011%, 92.011%, 0, 0.000%, 0.000%, 163377, 7.989%, 7.989%, 163377, 7.989%, 7.989%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Dubbo_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Griffith_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Griffith_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Gympie_DEST_router", 0, 0.000%, 0.000%, 2044967, 99.992%, 99.992%, 2044967, 99.992%, 99.992%, 0, 0.000%, 0.000%, 160, 0.008%, 0.008%, 160, 0.008%, 0.008%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Gympie_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Hobart_State_Office_DEST_router", 0, 0.000%, 0.000%, 2044447, 99.967%, 99.967%, 2044447, 99.967%, 99.967%, 0, 0.000%, 0.000%, 680, 0.033%, 0.033%, 680, 0.033%, 0.033%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Hobart_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Kempsey_DEST_router", 0, 0.000%, 0.000%, 1715529, 83.884%, 83.884%, 1715529, 83.884%, 83.884%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 329598, 16.116%, 16.116%, 329598, 16.116%, 16.116%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Kempsey_Optus_router_PE_interface", 0, 0.000%, 0.000%, 1715518, 83.883%, 83.883%, 1715518, 83.883%, 83.883%, 0, 0.000%, 0.000%, 329609, 16.117%, 16.117%, 329609, 16.117%, 16.117%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Lismore_DEST_router", 0, 0.000%, 0.000%, 2043317, 99.911%, 99.911%, 2043317, 99.911%, 99.911%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 1810, 0.089%, 0.089%, 1810, 0.089%, 0.089%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Lismore_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2043317, 99.911%, 99.911%, 2043317, 99.911%, 99.911%, 0, 0.000%, 0.000%, 1810, 0.089%, 0.089%, 1810, 0.089%, 0.089%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MELSW300", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW200", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW201", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW202", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW203", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW204", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW205", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW206", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW207", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW208", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW209", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW210", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW200", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW201", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW202", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW203", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW204", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW205", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW206", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW207", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW208", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW210", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Mackay_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Mackay_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Melbourne_State_Office_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Melbourne_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Mildura_DEST_router", 0, 0.000%, 0.000%, 2044796, 99.984%, 99.984%, 2044796, 99.984%, 99.984%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 331, 0.016%, 0.016%, 331, 0.016%, 0.016%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Mildura_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2044795, 99.984%, 99.984%, 2044795, 99.984%, 99.984%, 0, 0.000%, 0.000%, 332, 0.016%, 0.016%, 332, 0.016%, 0.016%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Farmer_Campbelltown_Optus_router_PE_interface_frame", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Farmer_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Hardgrave_DEST_router_HSRP_A", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Hardgrave_DEST_router_HSRP_B", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Hardgrave_Moorooka_Optus_router_PE_interface_adsl", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Hardgrave_Moorooka_Optus_router_PE_interface_frame", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Nelson_DEST_router_HSRP_A", 0, 0.000%, 0.000%, 2043936, 99.942%, 99.942%, 2043936, 99.942%, 99.942%, 0, 0.000%, 0.000%, 1191, 0.058%, 0.058%, 1191, 0.058%, 0.058%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Nelson_DEST_router_HSRP_B", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Nelson_Lindfield_Optus_router_PE_interface_ethernet", 0, 0.000%, 0.000%, 2044937, 99.991%, 99.991%, 2044937, 99.991%, 99.991%, 0, 0.000%, 0.000%, 190, 0.009%, 0.009%, 190, 0.009%, 0.009%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Nelson_Lindfield_Optus_router_PE_interface_frame", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Moree_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Moree_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Morwell_DEST_router", 0, 0.000%, 0.000%, 2044542, 99.971%, 99.971%, 2044542, 99.971%, 99.971%, 0, 0.000%, 0.000%, 10, 0.000%, 0.000%, 10, 0.000%, 0.000%, 0, 0.000%, 0.000%, 575, 0.028%, 0.028%, 575, 0.028%, 0.028%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Morwell_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2044031, 99.946%, 99.946%, 2044031, 99.946%, 99.946%, 0, 0.000%, 0.000%, 1096, 0.054%, 0.054%, 1096, 0.054%, 0.054%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Newcastle_DEST_router", 0, 0.000%, 0.000%, 2043736, 99.932%, 99.932%, 2043736, 99.932%, 99.932%, 0, 0.000%, 0.000%, 1391, 0.068%, 0.068%, 1391, 0.068%, 0.068%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Newcastle_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Nowra_DEST_router", 0, 0.000%, 0.000%, 2043587, 99.925%, 99.925%, 2043587, 99.925%, 99.925%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 1540, 0.075%, 0.075%, 1540, 0.075%, 0.075%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Nowra_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2043587, 99.925%, 99.925%, 2043587, 99.925%, 99.925%, 0, 0.000%, 0.000%, 1540, 0.075%, 0.075%, 1540, 0.075%, 0.075%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"ORASW200", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Orange_DEST_router", 0, 0.000%, 0.000%, 2044829, 99.985%, 99.985%, 2044829, 99.985%, 99.985%, 0, 0.000%, 0.000%, 251, 0.012%, 0.012%, 251, 0.012%, 0.012%, 0, 0.000%, 0.000%, 47, 0.002%, 0.002%, 47, 0.002%, 0.002%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Orange_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045080, 99.998%, 99.998%, 2045080, 99.998%, 99.998%, 0, 0.000%, 0.000%, 47, 0.002%, 0.002%, 47, 0.002%, 0.002%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"PARSW201", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"PARSW202", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"PARSW203", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"PARSW210", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"PERSW600", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Perth_State_Office_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Perth_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"SYDSW200", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Sydney_State_Office_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Sydney_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TODSW210", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW202", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW203", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW204", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW205", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW210", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Taree_DEST_router", 0, 0.000%, 0.000%, 2043105, 99.901%, 99.901%, 2043105, 99.901%, 99.901%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 2022, 0.099%, 0.099%, 2022, 0.099%, 0.099%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Taree_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2043105, 99.901%, 99.901%, 2043105, 99.901%, 99.901%, 0, 0.000%, 0.000%, 2022, 0.099%, 0.099%, 2022, 0.099%, 0.099%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Thursday_Island_DEST_router", 0, 0.000%, 0.000%, 2024449, 98.989%, 98.989%, 2024449, 98.989%, 98.989%, 0, 0.000%, 0.000%, 20678, 1.011%, 1.011%, 20678, 1.011%, 1.011%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Thursday_Island_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Toowoomba_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Toowoomba_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Walgett_DEST_router", 0, 0.000%, 0.000%, 2043191, 99.905%, 99.905%, 2043191, 99.905%, 99.905%, 0, 0.000%, 0.000%, 1936, 0.095%, 0.095%, 1936, 0.095%, 0.095%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Walgett_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Wollongong_DEST_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Wollongong_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Wyong_DEST_router", 0, 0.000%, 0.000%, 2042682, 99.880%, 99.880%, 2042682, 99.880%, 99.880%, 0, 0.000%, 0.000%, 125, 0.006%, 0.006%, 125, 0.006%, 0.006%, 0, 0.000%, 0.000%, 2320, 0.113%, 0.113%, 2320, 0.113%, 0.113%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Wyong_Optus_router_PE_interface", 0, 0.000%, 0.000%, 2042807, 99.887%, 99.887%, 2042807, 99.887%, 99.887%, 0, 0.000%, 0.000%, 2320, 0.113%, 0.113%, 2320, 0.113%, 0.113%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"acisp050", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"acisp051", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"acisp052", 0, 0.000%, 0.000%, 2044867, 99.987%, 99.987%, 2044867, 99.987%, 99.987%, 0, 0.000%, 0.000%, 260, 0.013%, 0.013%, 260, 0.013%, 0.013%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"igf_dns_vip", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"nms_segment_router", 0, 0.000%, 0.000%, 2045127, 100.000%, 100.000%, 2045127, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
a334 137
# DEST_Optus_SLA_hours
Cache-Control: no-store
Pragma: no-cache
Last-Modified: Mon, 24 Oct 2005 06:05:27 GMT
Expires: Thu, 01 Jan 1970 00:00:00 GMT
Content-type: text/plain

HOST_NAME, TIME_UP_SCHEDULED, PERCENT_TIME_UP_SCHEDULED, PERCENT_KNOWN_TIME_UP_SCHEDULED, TIME_UP_UNSCHEDULED, PERCENT_TIME_UP_UNSCHEDULED, PERCENT_KNOWN_TIME_UP_UNSCHEDULED, TOTAL_TIME_UP, PERCENT_TOTAL_TIME_UP, PERCENT_KNOWN_TIME_UP, TIME_DOWN_SCHEDULED, PERCENT_TIME_DOWN_SCHEDULED, PERCENT_KNOWN_TIME_DOWN_SCHEDULED, TIME_DOWN_UNSCHEDULED, PERCENT_TIME_DOWN_UNSCHEDULED, PERCENT_KNOWN_TIME_DOWN_UNSCHEDULED, TOTAL_TIME_DOWN, PERCENT_TOTAL_TIME_DOWN, PERCENT_KNOWN_TIME_DOWN, TIME_UNREACHABLE_SCHEDULED, PERCENT_TIME_UNREACHABLE_SCHEDULED, PERCENT_KNOWN_TIME_UNREACHABLE_SCHEDULED, TIME_UNREACHABLE_UNSCHEDULED, PERCENT_TIME_UNREACHABLE_UNSCHEDULED, PERCENT_KNOWN_TIME_UNREACHABLE_UNSCHEDULED, TOTAL_TIME_UNREACHABLE, PERCENT_TOTAL_TIME_UNREACHABLE, PERCENT_KNOWN_TIME_UNREACHABLE, TIME_UNDETERMINED_NOT_RUNNING, PERCENT_TIME_UNDETERMINED_NOT_RUNNING, TIME_UNDETERMINED_NO_DATA, PERCENT_TIME_UNDETERMINED_NO_DATA, TOTAL_TIME_UNDETERMINED, PERCENT_TOTAL_TIME_UNDETERMINED
"16_Mort_St_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Adelaide_State_Office_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Adelaide_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Albany_DEST_router", 0, 0.000%, 0.000%, 745449, 97.630%, 97.630%, 745449, 97.630%, 97.630%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 18096, 2.370%, 2.370%, 18096, 2.370%, 2.370%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Albany_Optus_router_PE_interface", 0, 0.000%, 0.000%, 745449, 97.630%, 97.630%, 745449, 97.630%, 97.630%, 0, 0.000%, 0.000%, 18096, 2.370%, 2.370%, 18096, 2.370%, 2.370%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Albury_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Albury_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Armidale_DEST_router", 0, 0.000%, 0.000%, 730505, 95.673%, 95.673%, 730505, 95.673%, 95.673%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 33040, 4.327%, 4.327%, 33040, 4.327%, 4.327%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Armidale_Optus_router_PE_interface", 0, 0.000%, 0.000%, 730375, 95.656%, 95.656%, 730375, 95.656%, 95.656%, 0, 0.000%, 0.000%, 33170, 4.344%, 4.344%, 33170, 4.344%, 4.344%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"BENSW201", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"BENSW202", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"BENSW203", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"BNESW400", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Bendigo_DEST_router", 0, 0.000%, 0.000%, 393625, 51.552%, 51.552%, 393625, 51.552%, 51.552%, 0, 0.000%, 0.000%, 369920, 48.448%, 48.448%, 369920, 48.448%, 48.448%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Bendigo_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Brisbane_State_Office_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Brisbane_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Broken_Hill_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Broken_Hill_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Bunbury_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Bunbury_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"CWASW201", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"CWASW202", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"CyberTrust_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"DARSW000", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"DUBSW200", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Darwin_State_Office_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Darwin_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Dubbo_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Dubbo_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Griffith_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Griffith_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Gympie_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Gympie_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Hobart_State_Office_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Hobart_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Kempsey_DEST_router", 0, 0.000%, 0.000%, 604800, 79.209%, 79.209%, 604800, 79.209%, 79.209%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 158745, 20.791%, 20.791%, 158745, 20.791%, 20.791%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Kempsey_Optus_router_PE_interface", 0, 0.000%, 0.000%, 604800, 79.209%, 79.209%, 604800, 79.209%, 79.209%, 0, 0.000%, 0.000%, 158745, 20.791%, 20.791%, 158745, 20.791%, 20.791%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Lismore_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Lismore_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MELSW300", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW200", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW201", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW202", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW203", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW204", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW205", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW206", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW207", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW208", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW209", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTASW210", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW200", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW201", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW202", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW203", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW204", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW205", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW206", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW207", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW208", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"MTBSW210", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Mackay_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Mackay_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Melbourne_State_Office_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Melbourne_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Mildura_DEST_router", 0, 0.000%, 0.000%, 763214, 99.957%, 99.957%, 763214, 99.957%, 99.957%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 331, 0.043%, 0.043%, 331, 0.043%, 0.043%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Mildura_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763213, 99.957%, 99.957%, 763213, 99.957%, 99.957%, 0, 0.000%, 0.000%, 332, 0.043%, 0.043%, 332, 0.043%, 0.043%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Farmer_Campbelltown_Optus_router_PE_interface_frame", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Farmer_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Hardgrave_DEST_router_HSRP_A", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Hardgrave_DEST_router_HSRP_B", 0, 0.000%, 0.000%, 763524, 99.997%, 99.997%, 763524, 99.997%, 99.997%, 0, 0.000%, 0.000%, 21, 0.003%, 0.003%, 21, 0.003%, 0.003%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Hardgrave_Moorooka_Optus_router_PE_interface_adsl", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Hardgrave_Moorooka_Optus_router_PE_interface_frame", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Nelson_DEST_router_HSRP_A", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Nelson_DEST_router_HSRP_B", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Nelson_Lindfield_Optus_router_PE_interface_ethernet", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Minister_Nelson_Lindfield_Optus_router_PE_interface_frame", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Moree_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Moree_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Morwell_DEST_router", 0, 0.000%, 0.000%, 762970, 99.925%, 99.925%, 762970, 99.925%, 99.925%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 575, 0.075%, 0.075%, 575, 0.075%, 0.075%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Morwell_Optus_router_PE_interface", 0, 0.000%, 0.000%, 762449, 99.856%, 99.856%, 762449, 99.856%, 99.856%, 0, 0.000%, 0.000%, 1096, 0.144%, 0.144%, 1096, 0.144%, 0.144%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Newcastle_DEST_router", 0, 0.000%, 0.000%, 762154, 99.818%, 99.818%, 762154, 99.818%, 99.818%, 0, 0.000%, 0.000%, 1391, 0.182%, 0.182%, 1391, 0.182%, 0.182%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Newcastle_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Nowra_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Nowra_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"ORASW200", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Orange_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Orange_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"PARSW201", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"PARSW202", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"PARSW203", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"PARSW210", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"PERSW600", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Perth_State_Office_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Perth_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"SYDSW200", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Sydney_State_Office_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Sydney_State_Office_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TODSW210", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW202", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW203", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW204", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW205", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"TRASW210", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Taree_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Taree_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Thursday_Island_DEST_router", 0, 0.000%, 0.000%, 760117, 99.551%, 99.551%, 760117, 99.551%, 99.551%, 0, 0.000%, 0.000%, 3428, 0.449%, 0.449%, 3428, 0.449%, 0.449%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Thursday_Island_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Toowoomba_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Toowoomba_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Walgett_DEST_router", 0, 0.000%, 0.000%, 761801, 99.772%, 99.772%, 761801, 99.772%, 99.772%, 0, 0.000%, 0.000%, 1744, 0.228%, 0.228%, 1744, 0.228%, 0.228%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Walgett_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Wollongong_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Wollongong_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Wyong_DEST_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"Wyong_Optus_router_PE_interface", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"acisp050", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"acisp051", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"acisp052", 0, 0.000%, 0.000%, 763285, 99.966%, 99.966%, 763285, 99.966%, 99.966%, 0, 0.000%, 0.000%, 260, 0.034%, 0.034%, 260, 0.034%, 0.034%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"igf_dns_vip", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
"nms_segment_router", 0, 0.000%, 0.000%, 763545, 100.000%, 100.000%, 763545, 100.000%, 100.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0.000%, 0, 0.000%, 0, 0.000%, 0, 0.000%
END_OF_FILE_MARKER



1;


@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
# $Id$
d5 4
a8 1
# $Log$
d17 8
a24 1
use constant LOCAL_CGI			=> sub { return `/usr/lib/nagios/cgi/avail.cgi` } ;
a68 3
$ENV{REMOTE_USER}			= 'sh1517' ;
$ENV{REQUEST_METHOD}			= 'GET' ;

d85 4
a88 4
    my $qstring ;
       ($qstring = QS_TEMP) =~ s/REPORT_PERIOD/$rep_period/ ;

    $ENV{QUERY_STRING}	= $qstring ;
d90 1
a90 1
       chomp( @@avail_cgi = $data_source{$source_tag}->() ) ;
d94 1
a94 1
    $avail_report{$rep_period} =  [ @@avail_report ] ;
@
